<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Balance Life</title>
  
  
  <link href="https://www.wuzhaoyang.fun/atom.xml" rel="self"/>
  
  <link href="https://www.wuzhaoyang.fun/"/>
  <updated>2023-11-20T05:57:42.135Z</updated>
  <id>https://www.wuzhaoyang.fun/</id>
  
  <author>
    <name>Amerina</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Macola领域知识</title>
    <link href="https://www.wuzhaoyang.fun/2023/11/20/Macola%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.wuzhaoyang.fun/2023/11/20/Macola%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/</id>
    <published>2023-11-20T05:57:00.000Z</published>
    <updated>2023-11-20T05:57:42.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Key-Words"><a href="#Key-Words" class="headerlink" title="Key Words"></a>Key Words</h3><table><thead><tr><th>AP–Accounts Payable</th><th>应付账款</th></tr></thead><tbody><tr><td>AR–Accounts receivable</td><td>应收账款</td></tr><tr><td>BB-Bank account book</td><td>银行账簿</td></tr><tr><td>GL-General ledger management</td><td>总账管理</td></tr><tr><td>IM-Inventory management</td><td>库存管理</td></tr><tr><td>OE-Order management</td><td>订单管理</td></tr><tr><td>PO-purchase order</td><td>采购单管理</td></tr><tr><td>SM-System Management</td><td>系统管理</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="Credit-Memo-And-Debit-Memo"><a href="#Credit-Memo-And-Debit-Memo" class="headerlink" title="Credit Memo And Debit Memo"></a>Credit Memo And Debit Memo</h3><p>在 Macola ERP 中，Credit Memo（贷项通知单）和 Debit Memo（借项通知单）是两种常见的会计术语，用于记录销售和采购交易中的调整。</p><p>Credit Memo（贷项通知单）通常用于以下情况：</p><ol><li>退货：当客户退回已购买的产品时，您可以发出贷项通知单来退还客户的付款。</li><li>价格调整：如果您需要调整产品的销售价格，您可以发出贷项通知单来减少客户的应付款项。</li><li>优惠折扣：如果您给客户提供了折扣或优惠，您可以发出贷项通知单来减少客户的应付款项。</li></ol><p>Debit Memo（借项通知单）通常用于以下情况：</p><ol><li>补发货物：当您漏发了产品或提供了不完整的订单时，您可以发出借项通知单来增加客户的应付款项。</li><li>价格调整：如果您需要调整产品的采购价格，您可以发出借项通知单来增加供应商的应付款项。</li><li>罚款或违约金：如果供应商或客户未履行合同条款，您可以发出借项通知单来增加对方的应付款项。</li></ol><p>总结起来，<strong>Credit Memo（贷项通知单）用于减少客户的应付款项，而 Debit Memo（借项通知单）用于增加客户或供应商的应付款项。</strong>这些通知单可以帮助您记录交易的调整和变更，确保账目的准确性。</p><h3 id="Accounts-Receivable-And-Accounts-Payable"><a href="#Accounts-Receivable-And-Accounts-Payable" class="headerlink" title="Accounts Receivable And Accounts Payable"></a>Accounts Receivable And Accounts Payable</h3><p>在 Macola ERP 中，AR 和 AP 是会计术语，分别代表应收账款（Accounts Receivable）和应付账款（Accounts Payable）。</p><p>AR（应收账款）是指企业向客户销售商品或提供服务后尚未收到的付款金额。当您向客户发出销售发票时，相应的金额会记录在应收账款中。AR 反映了客户欠您的款项，是您从客户那里应收的资金。</p><p>AP（应付账款）是指企业购买商品或接受服务后尚未支付的金额。当您从供应商收到采购发票时，相应的金额会记录在应付账款中。AP 反映了您欠供应商的款项，是您应付给供应商的资金。</p><p>AR 和 AP 是财务管理中重要的指标，可以帮助企业跟踪和管理与客户和供应商之间的财务关系。通过监控 AR 和 AP 的变化，您可以了解企业的应收款项和应付款项的状况，并及时采取措施来确保资金流动的正常运作。</p><h3 id="BB-Bank-account-book"><a href="#BB-Bank-account-book" class="headerlink" title="BB-Bank account book"></a>BB-Bank account book</h3><p> “Bank Account Book”，即银行账户簿。银行账户簿是记录企业或个人在银行中的账户活动的记录。它包含了存款、取款、利息、手续费等与银行账户相关的交易信息。</p><p>在 Macola ERP 中，您可以使用银行账户簿来跟踪和管理与银行账户相关的财务活动。这包括记录存款、提现、支票、银行费用等。通过维护准确的银行账户簿，您可以确保与银行账户的余额和交易记录一致，并进行有效的现金管理和对账操作。</p><h3 id="GL-Account、Cost-Unit、Cost-Center"><a href="#GL-Account、Cost-Unit、Cost-Center" class="headerlink" title="GL Account、Cost Unit、Cost Center"></a>GL Account、Cost Unit、Cost Center</h3><p>在 Macola ERP 中，”GL Account” 是指 “General Ledger Account”，即总账科目。总账科目是用于记录和跟踪企业财务交易的分类账户。它们用于汇总和组织财务信息，以便进行报表编制、财务分析和决策制定。</p><p>总账科目可以代表不同类型的资产、负债、所有权权益、收入和费用。每个总账科目都有一个唯一的编码和名称，用于识别和区分不同的科目。例如，现金、应收账款、应付账款、销售收入、采购成本等都可以是总账科目。</p><p>另外，”Cost Unit” 和 “Cost Center” 是与成本管理相关的概念。”Cost Unit” 是指成本单位，它可以是产品、项目、部门或其他任何可以衡量成本的实体。”Cost Center” 是指成本中心，它是一个特定部门、团队或业务单位，负责管理和控制相关成本。</p><p>在 Macola ERP 中，您可以使用总账科目、成本单位和成本中心来跟踪和管理企业的财务和成本信息。这些概念相互关联，帮助您进行准确的财务报告、成本分析和预算控制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Key-Words&quot;&gt;&lt;a href=&quot;#Key-Words&quot; class=&quot;headerlink&quot; title=&quot;Key Words&quot;&gt;&lt;/a&gt;Key Words&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AP–Accounts Payable&lt;</summary>
      
    
    
    
    <category term="Macola ERP" scheme="https://www.wuzhaoyang.fun/categories/Macola-ERP/"/>
    
    
    <category term="Macola ERP" scheme="https://www.wuzhaoyang.fun/tags/Macola-ERP/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s UOW?</title>
    <link href="https://www.wuzhaoyang.fun/2023/09/08/What&#39;s%20UOW/"/>
    <id>https://www.wuzhaoyang.fun/2023/09/08/What&#39;s%20UOW/</id>
    <published>2023-09-08T08:13:00.000Z</published>
    <updated>2023-09-08T08:40:08.382Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="What’s-UOW"><a href="#What’s-UOW" class="headerlink" title="What’s UOW?"></a>What’s UOW?</h2><p>“A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you’re done, it figures out everything that needs to be done to alter the database as a result of your work.”   – Martin Fowler</p><p>SO Unit of Work Key Info:</p><ul><li>UOW keeps track of changes</li><li>UOW maintenance change list</li><li>UOW commits all changes at once</li></ul><p>EF Core DbContext naturally UOW is realized</p><ul><li><p>Each DbContext instance has a ChangeTracker that tracks changes to the entity</p></li><li><p>When DbContext.SaveChanges is called, all changes are committed to the database in one go via the transaction</p></li></ul><p><strong>Implementing Repository pattern in domain-driven Design，By UOW UnitOfWorkInterceptor took over after ApplicationServervice methods performed DbContext. SaveChanges operation</strong></p><p><strong>The transaction is just a way to realize the unit of work. EFCore can implement UOW without using transactions.</strong></p><h2 id="What’s-Ambient-Transactions"><a href="#What’s-Ambient-Transactions" class="headerlink" title="What’s Ambient Transactions?"></a>What’s Ambient Transactions?</h2><p><strong>Common Transaction：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> ApplicationDbContext())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> transaction = context.Database.BeginTransaction())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> student1 = <span class="keyword">new</span> Student();</span><br><span class="line">        student1.Name = <span class="string">&quot;Robert Fatou&quot;</span>;</span><br><span class="line">        context.Add(student1);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">        <span class="comment">// The Id will have a valid value</span></span><br><span class="line">        Console.WriteLine(student1.Id);</span><br><span class="line">        <span class="comment">// Let&#x27;s revert the operation</span></span><br><span class="line">        transaction.Rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Ambient Transaction：</strong></p><p>An <strong>ambient transaction</strong> is one that works at the thread level. Thus, all operations that occur in that context will be part of the transaction.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> scope = <span class="keyword">new</span> TransactionScope())</span><br><span class="line">    &#123;</span><br><span class="line">        CreateStudent();</span><br><span class="line">        CreateCourse();</span><br><span class="line">        <span class="comment">// Uncomment the following line if you want to</span></span><br><span class="line">        <span class="comment">// have the previous operations persisted in the Database</span></span><br><span class="line">        <span class="comment">//scope.Complete();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateCourse</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> ApplicationDbContext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.Name = <span class="string">&quot;Programming I&quot;</span>;</span><br><span class="line">        context.Add(course);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateStudent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> ApplicationDbContext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> student1 = <span class="keyword">new</span> Student();</span><br><span class="line">        student1.Name = <span class="string">&quot;Transaction Scope&quot;</span>;</span><br><span class="line">        context.Add(student1);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reference：</strong></p><p><a href="https://www.martinfowler.com/eaaCatalog/unitOfWork.html">P of EAA: Unit of Work (martinfowler.com)</a></p><p><a href="https://learn.microsoft.com/en-us/ef/core/dbcontext-configuration/">DbContext Lifetime, Configuration, and Initialization - EF Core | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/en-us/ef/core/saving/transactions#cross-context-transaction">Transactions - EF Core | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/en-us/dotnet/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope">Implementing an Implicit Transaction using Transaction Scope - .NET Framework | Microsoft Learn</a></p><p><a href="https://gavilan.blog/2018/08/02/entity-framework-core-2-1-ambient-transactions-new-functionality">Entity Framework Core 2.1: Ambient Transactions</a></p>]]></content>
    
    
    <summary type="html">Some Usual Development Pattern:UOW</summary>
    
    
    
    <category term="Pattern" scheme="https://www.wuzhaoyang.fun/categories/Pattern/"/>
    
    
    <category term="Pattern" scheme="https://www.wuzhaoyang.fun/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Find Your Life Goals</title>
    <link href="https://www.wuzhaoyang.fun/2023/06/28/Find%20Your%20Life%20Goals/"/>
    <id>https://www.wuzhaoyang.fun/2023/06/28/Find%20Your%20Life%20Goals/</id>
    <published>2023-06-28T06:54:00.000Z</published>
    <updated>2023-06-29T00:39:21.802Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="《成为你自己》"><a href="#《成为你自己》" class="headerlink" title="《成为你自己》"></a>《成为你自己》</h1><p><img src="https://i.postimg.cc/rs2HtrrG/20220607211453924.png" alt="目标层次结构"></p><p>拓展必看：</p><ul><li><a href="https://github.com/amerina/Beyourself/blob/main/BecomeYourSelf.md">成为你自己详解版</a></li><li><a href="https://github.com/amerina/Beyourself/blob/main/%E4%BA%BA%E7%94%9F%E7%90%86%E6%83%B3%E4%B8%8E%E7%9B%AE%E6%A0%87.xmind">人生理想与目标思维导图</a></li></ul><h2 id="1、为什么人生目标很重要"><a href="#1、为什么人生目标很重要" class="headerlink" title="1、为什么人生目标很重要?"></a>1、为什么人生目标很重要?</h2><p>书写格式正确的书面目标为什么如此重要</p><ul><li><p>决策疲劳</p><p><mark>我们是人。我们被编程为采取简单的选择。走阻力最小的路。只有我们清晰地知道自己想要什么，才有动力选择更难走的路。</mark><br><mark>如果你的目标明确，决策疲劳就会减少，你的选择也会变得更容易。</mark>更容易而不是容易:(</p></li><li><p>衡量(进度)&#x2F;动机</p><p>衡量你的进步和你花在目标上的时间，是不断提醒你对自己做出的承诺</p></li></ul><h2 id="2、人生目标的类型"><a href="#2、人生目标的类型" class="headerlink" title="2、人生目标的类型"></a>2、人生目标的类型</h2><p>请记住，是你选择了什么，而不是你没有选择的东西，让你在生活中快乐。</p><h3 id="目标类型分类"><a href="#目标类型分类" class="headerlink" title="目标类型分类"></a>目标类型分类</h3><ul><li>成果目标：做出实实在在的成果</li><li>过程目标：每天专注完成的任务习惯</li><li>性能目标：个人标准</li><li>主题目标：专注于某个领域的目标</li><li>时间目标：有DeadLine的目标</li></ul><h3 id="人生目标分类"><a href="#人生目标分类" class="headerlink" title="人生目标分类"></a>人生目标分类</h3><ul><li>健康目标：每周固定的练习时间</li><li>财务目标：获得一个稳定&#x2F;舒适的财务状况</li><li>关系目标：维系家庭和朋友关系可能是最简单的方法，以戏剧性地改善你的生活和你的整体幸福感。</li><li>教育目标：终身学习者的心态</li><li>个人发展目标：成为更优秀的你</li><li>职业目标：确定一个明确的职业目标</li><li>心理目标：适当地放空自己，有规律地休息或活动给自己减压</li><li>生活方式目标：休闲目标、爱好&#x2F;朋友很重要</li><li>退休目标：仔细想想你的退休目标是什么</li></ul><h2 id="3、如何设定目标"><a href="#3、如何设定目标" class="headerlink" title="3、如何设定目标"></a>3、如何设定目标</h2><p>不管你使用什么技巧，记住，如果目标没有写下来，你就没有目标。同时，记住要为你的目标设定激励。<strong>如果你的目标不能激发行动，那么它们对你就没有用处。</strong></p><h3 id="目标设定方法-技术-框架"><a href="#目标设定方法-技术-框架" class="headerlink" title="目标设定方法&#x2F;技术&#x2F;框架"></a>目标设定方法&#x2F;技术&#x2F;框架</h3><ul><li><p><strong>每个类别一个目标技巧</strong></p><p>浏览第二章的分类列表，绞尽脑汁，直到你能为每个分类想出一个目标。</p></li><li><p><strong>价值观优先技巧</strong></p><p>一旦你有了这个列表，你就有了一个透镜来审视你的生活。你可以问问自己，那些看重 x 的人会做什么？他们如何与人交流？</p></li><li><p><strong>目的第一技巧</strong></p><p>如果你已经知道你的人生目标是什么，那么通过目标的透镜来审视你生活的方方面面，设定有效的目标是极其容易的。</p></li><li><p><strong>Why，What，How技巧</strong></p><p>如果你还没有看过，你真的应该看看西蒙 · 西尼克的 TED 演讲，名为<strong>“从为什么开始”</strong>。</p><p><em>Notes：想象一下雇主为什么非要雇佣你不可，你有什么不可替代的吸引力</em></p></li><li><p><strong>SMART Goals 明智的目标</strong></p><ul><li>Specific 具体点</li><li>Measurable 可测量的</li><li>Attainable 可以实现</li><li>Relevant 相关的</li><li>Time-bound 有时限的</li></ul><p><strong>SMART 目标描述了一个完善的目标的剖析。</strong></p></li><li><p><strong>讣告技巧</strong></p><p>讣告方法给了你一个很好的方式去思考你想要什么样的目标，而不仅仅是如何写目标(比如 SMART 目标)。</p></li></ul><h2 id="4、生活目标的例子"><a href="#4、生活目标的例子" class="headerlink" title="4、生活目标的例子"></a>4、生活目标的例子</h2><ul><li><p>财务目标例子</p><p><strong>在未来5年内每年赚取 $x $000美元</strong></p></li><li><p>教育目标实例</p><ul><li><strong>我将每年至少做 x 个网络课程变成我的爱好。只有有趣的事情</strong></li><li><strong>在接下来的两年里，我将学习如何把 x 说成一个测试级别的 x</strong></li></ul></li><li><p>个人发展目标的例子</p><ul><li>我将致力于我的时间管理和承诺。我会更频繁地对新事物说不，以保证我能够兑现我已经许下的诺言</li><li>我会更认真地对待个人责任。我不会因为我对结果有部分影响的事件而责怪他人</li></ul></li><li><p>关系目标例子</p><p>我会每周至少联系我所有亲近的家人一次，看看他们过得怎么样</p></li><li><p>职业目标的例子</p><ul><li><strong>我将有勇气改变我的职业生涯。永远不会太迟。我现在将采取渐进的步骤，目标是在未来24个月内进入这个行业</strong></li><li>我将在未来3年内开始我自己的事业，在一个行业，我喜欢和发现迷人</li></ul></li><li><p>心理目标的例子</p><p><strong>我会每天冥想10分钟，写日记，这样我总是能够自我意识到是什么导致了我内心的挣扎和痛苦</strong></p></li><li><p>生活方式目标的例子</p><ul><li>成为比我年轻的人的榜样，在那里指导他们，帮助他们成长</li><li><strong>我将在未来5年内自行出版一本书。如果我能让100个人读我的作品，我会很高兴，也会很满足</strong></li></ul></li></ul><h2 id="5、人生目标语录"><a href="#5、人生目标语录" class="headerlink" title="5、人生目标语录"></a>5、人生目标语录</h2><ul><li><strong>一个正确设定的目标已经实现了一半</strong></li><li><strong>设定目标是将无形变为有形的第一步</strong></li><li><strong>在没有明确目标的情况下，我们会变得奇怪地忠于每天做一些琐碎的事情</strong></li><li><strong>一个目标并不总是意味着要达到，它通常只是告诉我们目的地</strong></li><li><strong>当目标明显无法实现时，不要调整目标，调整行动步骤</strong></li><li><strong>目标是一个有最后期限的梦想</strong></li><li><strong>目标是强大的动力，但它们也会让你痛苦。你需要一流的日常习惯</strong></li></ul><p>最后一句话很好地开启了下一章。在这篇文章中，我们将讨论长期坚持目标的策略，以及如何让自己对自己负责。</p><h2 id="6、如何坚持你的目标"><a href="#6、如何坚持你的目标" class="headerlink" title="6、如何坚持你的目标"></a>6、如何坚持你的目标</h2><ul><li><p>每周&#x2F;每月&#x2F;每季度和每年的回顾</p><p>星期天是我的复习日。我重新阅读了我所有的目标，以及当我决定这些目标对我很重要的时候，我所写的关于它们的内容。</p><p>如果没有这种有规律的强化，你的目标就会半途而废。你需要评估你的进展，并决定在接下来的一周里需要做些什么。</p><p>我知道这一切听起来像“工作”。没错。它应该是。自尊和实现你的目标是工作。</p><p><strong>你不会后悔每周花15分钟来反思你人生中最重要的愿望。</strong></p></li><li><p>我应该有多少个目标？</p><p>应该在3到5之间。你需要能够记住它们，并把它们放在首位。</p></li><li><p><strong>里程碑的力量</strong></p><p>里程碑可以被认为是子目标，但它们可以更容易地使用 SMART 目标格式编写。</p></li><li><p><strong>奖励自己的进步</strong></p><p>如果你真的达到了一个里程碑，庆祝吧！这是一个了不起的成就，你立即进入前5% 的人。</p></li><li><p>实现人生目标</p></li></ul><h2 id="7、使用讣告技巧确定人生目标"><a href="#7、使用讣告技巧确定人生目标" class="headerlink" title="7、使用讣告技巧确定人生目标"></a>7、使用讣告技巧确定人生目标</h2><ol><li><p>描述你想成为什么样的人。用你的讣告作为框架来表达你自己。</p><p>发现你的人生目的和目标，你要做的第一件事就是写你的讣告。</p></li><li><p>为生活的不同方面创建四个人生目标</p></li><li><p>对于每个目标，你都要思考你想要它的原因</p><p>如果你实现了这个目标，它将如何影响你的生活？</p></li><li><p>思考如果目标失败了的话你的生活是怎样的？</p><p>你对自己的情绪和失败的感觉越清楚，你成功的动力就越强大。</p></li><li><p>从今天开始的十二个月内，你将设定一个S.M.A.R.T. 里程碑，它将成为你实现目标的垫脚石。</p><p>你需要设定一个时间点，在这个时间点上你可以检查你的进度，从而鼓励你今天就采取行动。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;《成为你自己》&quot;&gt;&lt;a href=&quot;#《成为你自己》&quot; class=&quot;headerlink&quot; title=&quot;《成为你自己》&quot;&gt;&lt;/a&gt;《成为你自己》&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/rs2Htr</summary>
      
    
    
    
    <category term="目标" scheme="https://www.wuzhaoyang.fun/categories/%E7%9B%AE%E6%A0%87/"/>
    
    
    <category term="目标" scheme="https://www.wuzhaoyang.fun/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计术语表</title>
    <link href="https://www.wuzhaoyang.fun/2023/06/27/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%9C%AF%E8%AF%AD%E8%A1%A8/"/>
    <id>https://www.wuzhaoyang.fun/2023/06/27/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%9C%AF%E8%AF%AD%E8%A1%A8/</id>
    <published>2023-06-27T08:05:48.000Z</published>
    <updated>2023-07-24T07:57:46.272Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>领域驱动设计（Domain-Driven Design，简称DDD）是一种软件开发方法论，它强调通过深入理解领域知识和业务需求，将领域模型贯穿于整个软件开发过程中。</p><p>以下是一些领域驱动设计中常见的专业术语及其解释：</p><p>战略和战术设计是站在DDD的角度进行划分。</p><ul><li><p>战略设计侧重于高层次、宏观上去划分和集成限界上下文，而战术设计则关注更具体使用建模工具来细化上下文。</p></li><li><p>战略设计的目标是建立一个一致、有界和可演化的领域模型，帮助团队理解业务需求，并为战术设计提供指导。</p></li><li><p>战术设计的目标是在特定的限界上下文中构建合理、可维护的领域模型，通过建立领域对象之间的关系和定义明确的职责，实现业务逻辑的有效组织和封装。</p></li><li><p>战略设计：战略设计关注的是整个领域的全局性问题，以及如何将业务需求、领域知识和软件设计相结合。</p><ul><li><p>通用语言：在领域驱动设计中，通用语言是指开发团队和领域专家之间共享的、统一的业务语言。</p><p>通用语言在整个领域驱动设计过程中起着至关重要的作用。通过与领域专家密切合作，开发团队能够理解业务领域的专业术语、业务规则和概念。然后，开发团队将这些领域专有的语言转化为代码中的类、方法和属性等编程语言的元素。</p><p>通用语言的使用有助于消除开发人员和领域专家之间的沟通障碍，确保开发人员对领域需求的准确理解。它还促进了领域模型的一致性，使得领域模型能够贯穿于整个软件开发过程中，从需求分析到代码实现。</p><p>通用语言应该在限界上下文中得到充分运用，以确保在不同团队和组织之间的沟通和协作时能够保持一致。通过在代码中使用与通用语言相匹配的命名和概念，可以提高代码的可读性和可维护性，并增强团队之间的合作效率。</p></li><li><p>限界上下文（Bounded Context）：定义了业务领域的边界，并明确了在该上下文中使用的术语和概念。限界上下文帮助将大型领域划分为更小的、可管理的部分。</p></li><li><p>大胆的领域模型（Big Picture Model）：通过深入理解业务领域，建立起高层次、综合性的领域模型。这个模型用于指导整个软件系统的设计和演化。</p></li><li><p>上下文映射（Context Mapping）：指不同限界上下文之间的关系和交互方式。通过上下文映射，可以定义不同上下文之间的协作机制、数据交换方式等。</p></li><li><p>领域（Domain）：指特定业务领域或问题领域，是软件系统所涉及的核心概念和规则的集合。</p><ul><li><p>核心域（Core Domain）：核心域是指与业务的核心竞争力直接相关的部分。它包含了组织的关键业务流程、核心概念和业务规则。核心域通常是系统的重点关注区域，其中的领域模型和业务逻辑是复杂且变化频繁的。</p><p>对核心域的设计和开发需要投入更多的精力和资源，以确保系统在这个领域具有竞争优势。通常会采用更深入的领域建模和领域驱动设计技术，以满足核心业务需求。</p></li><li><p>支撑域（Supporting Domain）：支撑域是指与核心域紧密相关，但不直接构成核心业务的领域部分。它为核心域提供支持和辅助功能，帮助核心业务的实现和运行。</p><p>支撑域的特点是对业务的理解和变动要求较低，通常包括通用的基础设施、共享服务、安全性和认证等功能。支撑域的设计和开发可以借鉴成熟的技术和框架，以提高效率和稳定性。</p><p>通用域（Generic Domain）：通用域是指与特定业务领域无关的通用功能和共享资源。它包括通用的业务功能、通用工具和通用库等。通用域通常是广泛应用于多个领域的通用概念和模式。</p><p>通用域的设计和开发具有一定的通用性和重复性，可以通过复用现有的解决方案和组件来加快开发进度。通用域的设计应该具备可扩展性和灵活性，以满足不同领域的需求。</p></li><li><p>划分领域为核心域、支撑域和通用域有助于团队在系统架构和设计时有针对性地分配资源和关注点。核心域是系统的关键，需要更多的精力进行设计和演化；支撑域提供支持，减轻核心域的压力；而通用域提供了通用功能，可以在不同领域中复用。</p></li></ul></li><li></li></ul></li><li><p>战术建模：战术设计关注的是在限界上下文内部对领域模型进行具体的建模和设计。</p><ul><li>领域层(Domain Layer)：在分层架构中负责领域逻辑的那部分设计和实现。领域层是在软件中用来表示领域模型的地方。</li><li>领域模型（Domain Model）：是对领域的概念、行为和规则的抽象表示。它反映了领域的本质，并与业务专家的语言相对应。</li><li>实体（Entity）：是具有唯一标识的领域对象，具有生命周期和状态变化。实体通常与业务中的具体事物相对应，如订单、用户等。</li><li>值对象（Value Object）：是没有唯一标识的领域对象，其价值是由其属性的组合决定的。值对象通常用于描述不可变的概念，如日期、时间、货币等。</li><li>聚合（Aggregate）：是一组相关对象的集合，其中一个对象是聚合根（Aggregate Root）。聚合根负责维护整个聚合的一致性和边界。</li><li>聚合根（Aggregate Root）：是聚合中的一个对象，其他对象通过聚合根进行访问和操作。聚合根具有全局唯一的标识，并负责保证聚合的完整性。</li><li>领域事件（Domain Event）：表示领域中发生的重要事情或状态改变的事件。领域事件可以用于解耦领域模型之间的交互，同时支持事件驱动架构。</li><li>领域服务（Domain Service）：是一种无状态的操作，提供对领域中的特定行为或业务规则的操作。领域服务通常不持有状态，但可以操作领域对象。</li><li>模块Model：一个抽象的系统，描述了领域的所选方面，可用于解决与该领域有关的问题。在领域驱动设计中，模块（Module）通常是基于业务功能或子领域来定义的。它可以包含一组聚合、实体、值对象、领域服务以及处理领域事件等。模块的目的是将相关的领域概念和行为封装在一起，提供高内聚、低耦合的设计。模块有助于组织和管理复杂的领域模型，使其更易于理解和维护。每个模块可以有自己的限界上下文、领域专家和开发团队，使其能够独立地开发、测试和演化。</li></ul></li></ul><p>领域驱动设计的四个层次（Layered Architecture）：包括用户界面层（User Interface Layer）、应用层（Application Layer）、领域层（Domain Layer）和基础设施层（Infrastructure Layer）。每个层次有不同的职责和关注点，</p><ul><li><p>分析模式（Analysis Patterns）：分析模式（Analysis Patterns）是在领域驱动设计中使用的一种方法，用于识别和描述在特定领域中常见的模式和概念。这些模式和概念反映了领域内的通用问题和解决方案，并帮助开发团队更好地理解领域需求。</p><p>分析模式主要用于分析和理解领域，而不是直接用于具体的实现。它们通过描述领域中的重要概念、关系和行为，帮助开发团队和领域专家之间建立共享的语言和理解。</p><p>以下是一些常见的分析模式：</p><ol><li>实体（Entity）：表示在领域中具有唯一标识的对象。实体具有自己的属性和行为，并与其他实体之间存在关系。</li><li>值对象（Value Object）：表示在领域中具有特定属性但无需唯一标识的对象。值对象通常用于描述领域中的特定值或概念。</li><li>聚合（Aggregate）：表示一组相关对象的集合，由一个聚合根（Aggregate Root）负责维护整个聚合的一致性和边界。</li><li>仓储（Repository）：表示对领域对象进行持久化和检索的机制。仓储提供了一种访问领域对象的接口，隐藏了底层的数据访问细节。</li><li>服务（Service）：表示领域中的操作和行为，这些操作不属于特定的实体或值对象，而是跨越多个对象的逻辑操作。</li><li>事件（Event）：表示领域中发生的重要事情或状态改变。事件可以被用于触发其他领域对象的行为或通知其他上下文。</li><li>规则（Rules）：表示领域中的业务规则和约束。规则定义了领域对象的行为和限制条件。</li></ol><p>分析模式帮助开发团队通过共享的领域语言和模式，更好地理解和解决特定领域中的问题。它们可以作为设计的参考和指导，帮助构建更符合业务需求的领域模型和软件系统。</p></li><li><p>深层模型(Deep Model)：深层模型通常是指对领域进行更加细致和全面的建模，包括考虑业务的各种细节、规则和约束，以及满足领域的复杂需求。它通常与大规模、复杂的领域相关，需要深入理解和处理领域中的各种关系和交互。</p></li></ul><p>  深层模型的设计和实现需要结合领域专家的经验和领域知识，以及领域驱动设计中的建模技巧和方法。通过建立深层模型，可以更好地满足业务需求，提高系统的可靠性和灵活性。</p><p>资源拓展：</p><ol><li><a href="https://domainstorytelling.org/">Domain Storytelling - Domain Storytelling</a></li><li><a href="https://github.com/amerina/awesome-ddd">Awesome-DDD</a></li></ol>]]></content>
    
    
    <summary type="html">Some common terminology for domain-driven design</summary>
    
    
    
    <category term="DDD" scheme="https://www.wuzhaoyang.fun/categories/DDD/"/>
    
    
    <category term="DDD" scheme="https://www.wuzhaoyang.fun/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>从0到1发布Nuget</title>
    <link href="https://www.wuzhaoyang.fun/2023/06/26/%E4%BB%8E0%E5%88%B01%E5%8F%91%E5%B8%83Nuget/"/>
    <id>https://www.wuzhaoyang.fun/2023/06/26/%E4%BB%8E0%E5%88%B01%E5%8F%91%E5%B8%83Nuget/</id>
    <published>2023-06-26T05:32:03.000Z</published>
    <updated>2023-06-26T08:46:33.664Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Nuget"><a href="#Nuget" class="headerlink" title="Nuget"></a>Nuget</h2><h3 id="1、创建示例项目"><a href="#1、创建示例项目" class="headerlink" title="1、创建示例项目"></a>1、创建示例项目</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--</span>创建文件夹EasyUtilityCore</span><br><span class="line"><span class="built_in">md</span> EasyUtilityCore</span><br><span class="line"><span class="built_in">cd</span> EasyUtilityCore</span><br><span class="line"></span><br><span class="line"><span class="literal">--</span>新建EasyUtilityCore类库</span><br><span class="line">dotnet new classlib</span><br></pre></td></tr></table></figure><p>新建扩展StringExtension</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EasyUtilityCore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StringExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 忽略空格与大小写</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strA&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strB&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CompareIgnoreCaseAndSpace</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> strA, <span class="built_in">string</span> strB</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strA == <span class="literal">null</span> || strB == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> strA == strB;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> strA.Trim().ToLower() == strB.Trim().ToLower();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 超长字符串截取</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 处理较短字符串截取Case</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;length&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Sub</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> str, <span class="built_in">int</span> length, <span class="built_in">int</span> index = <span class="number">0</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> str.Substring(index, Math.Min(str.Length, length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--构建类库</span><br><span class="line">dotnet build</span><br></pre></td></tr></table></figure><h3 id="2、添加包元数据"><a href="#2、添加包元数据" class="headerlink" title="2、添加包元数据"></a>2、添加包元数据</h3><p>每个 NuGet 包都需要一个清单，用以描述包的内容和依赖项。 在最终包中，清单是基于项目文件中包含的 NuGet 元数据属性生成的 文件。</p><p>打开 <em>.csproj</em>项目文件，并在现有 <code>&lt;PropertyGroup&gt;</code> 标记中添加以下属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageId</span>&gt;</span>EasyUtilityCore<span class="tag">&lt;/<span class="name">PackageId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Authors</span>&gt;</span>wzyandi<span class="tag">&lt;/<span class="name">Authors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Company</span>&gt;</span>wzyandi<span class="tag">&lt;/<span class="name">Company</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>Some common extension methods<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryUrl</span>&gt;</span>https://github.com/amerina/EasyUtilityCore<span class="tag">&lt;/<span class="name">RepositoryUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageProjectUrl</span>&gt;</span>https://github.com/amerina/EasyUtilityCore<span class="tag">&lt;/<span class="name">PackageProjectUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryType</span>&gt;</span>Git<span class="tag">&lt;/<span class="name">RepositoryType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageTags</span>&gt;</span>ASP.NET Core,Utility Method<span class="tag">&lt;/<span class="name">PackageTags</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Copyright</span>&gt;</span>Amerina<span class="tag">&lt;/<span class="name">Copyright</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PackageId在 nuget.org必须是唯一的。</p><h3 id="3、构建包"><a href="#3、构建包" class="headerlink" title="3、构建包"></a>3、构建包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet pack</span><br></pre></td></tr></table></figure><p>查看EasyUtilityCore\bin\Debug路径已生成EasyUtilityCore.1.0.0.nupkg文件</p><h3 id="4、发布包"><a href="#4、发布包" class="headerlink" title="4、发布包"></a>4、发布包</h3><p>将 <em>.nupkg</em> 文件发布到 nuget.org，方法是将 dotnet nuget push命令与从 nuget.org 获取的 API 密钥配合使用。</p><p>获取 API 密钥</p><ol><li><a href="https://www.nuget.org/users/account/LogOn?returnUrl=/">登录你的 nuget.org 帐户</a>，或创建一个帐户（如果你还没有帐户）。</li><li>选择用户名（在右上角），然后选择“API 密钥”。</li><li>选择 <strong>“创建”</strong>，并提供密钥的名称。</li><li>在 <strong>“选择范围”</strong>下，选择“ <strong>推送</strong>”。</li><li>在 <strong>“选择包</strong>&gt;<strong>Glob 模式</strong>”下，输入 *。</li><li>选择“创建”。</li><li>选择 <strong>“复制</strong> ”以复制新密钥。</li></ol><p>在包含 <em>.nupkg</em> 文件的文件夹运行以下命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget push EasyUtilityCore.<span class="number">1.0</span>.<span class="number">0</span>.nupkg <span class="literal">-key</span> [<span class="type">yourKey</span>] <span class="literal">-s</span> https://api.nuget.org/v3/index.json</span><br></pre></td></tr></table></figure><h3 id="5、包版本控制"><a href="#5、包版本控制" class="headerlink" title="5、包版本控制"></a>5、包版本控制</h3><p>特定版本号的格式为 Major.Minor.Patch[-Suffix] ，其中的组件具有以下含义：</p><ul><li><em>Major</em>：重大更改</li><li><em>Minor</em>：新增功能，但可向后兼容</li><li><em>Patch</em>：仅可向后兼容的 bug 修复</li><li><em>-Suffix</em>（可选）：连字符后跟字符串，表示预发布版本</li></ul><p>-Suffix-包开发人员通常遵循识别的命名约定：</p><ul><li><code>-alpha</code>：Alpha 版本，通常用于在制品和试验品。</li><li><code>-beta</code>：Beta 版本，通常指可用于下一计划版本的功能完整的版本，但可能包含已知 bug。</li><li><code>-rc</code>：候选发布，通常可能为最终（稳定）版本，除非出现重大 bug。</li></ul><h3 id="6、参考"><a href="#6、参考" class="headerlink" title="6、参考"></a>6、参考</h3><p><a href="https://learn.microsoft.com/zh-cn/nuget/what-is-nuget">NuGet 及其功能介绍 | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/zh-cn/nuget/nuget-org/package-readme-on-nuget-org">NuGet.org 上的包自述文件 | Microsoft Learn</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Nuget&quot;&gt;&lt;a href=&quot;#Nuget&quot; class=&quot;headerlink&quot; title=&quot;Nuget&quot;&gt;&lt;/a&gt;Nuget&lt;/h2&gt;&lt;h3 id=&quot;1、创建示例项目&quot;&gt;&lt;a href=&quot;#1、创建示例项目&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Nuget" scheme="https://www.wuzhaoyang.fun/categories/Nuget/"/>
    
    
    <category term="Nuget" scheme="https://www.wuzhaoyang.fun/tags/Nuget/"/>
    
  </entry>
  
</feed>
