<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Balance Life</title>
  
  
  <link href="https://www.wuzhaoyang.fun/atom.xml" rel="self"/>
  
  <link href="https://www.wuzhaoyang.fun/"/>
  <updated>2023-11-28T07:35:56.984Z</updated>
  <id>https://www.wuzhaoyang.fun/</id>
  
  <author>
    <name>Amerina</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Time Will Tell Me The Answer</title>
    <link href="https://www.wuzhaoyang.fun/2023/11/28/Time%20Will%20Tell%20Me%20The%20Answer/"/>
    <id>https://www.wuzhaoyang.fun/2023/11/28/Time%20Will%20Tell%20Me%20The%20Answer/</id>
    <published>2023-11-28T07:10:00.000Z</published>
    <updated>2023-11-28T07:35:56.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ASP-NET-Core框架"><a href="#ASP-NET-Core框架" class="headerlink" title="ASP.NET Core框架"></a>ASP.NET Core框架</h3><h4 id="一次请求的奇妙旅程"><a href="#一次请求的奇妙旅程" class="headerlink" title="一次请求的奇妙旅程"></a>一次请求的奇妙旅程</h4><h4 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h4><ul><li>MVC</li><li>WebAPI</li><li>RazorPages</li><li>SignalR</li></ul><h4 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h4><ul><li>DataProtection</li><li>Authentication</li><li>Authorization</li></ul><h4 id="NETCore"><a href="#NETCore" class="headerlink" title=".NETCore"></a>.NETCore</h4><ul><li>Hosting</li><li>Servers</li><li>Http</li><li>Routing</li></ul><h4 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h4><ul><li>StaticFiles</li><li>WebSockets</li><li>HttpOverrides</li><li>HealthChecks</li><li>Rewrite</li><li>CORS</li></ul><h4 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h4><ul><li>DependencyInjection</li><li>Logging</li><li>Configuration</li><li>Options</li><li>Http</li><li>Hosting</li><li>Caching</li><li>Diagnostics</li><li>Localization</li></ul><h3 id="ASP-NET-Core生态组件"><a href="#ASP-NET-Core生态组件" class="headerlink" title="ASP.NET Core生态组件"></a>ASP.NET Core生态组件</h3><h4 id="Front-End"><a href="#Front-End" class="headerlink" title="Front End"></a>Front End</h4><ul><li><strong>Razor Pages</strong></li><li>Blazor</li></ul><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><ul><li>AspectCore</li><li><strong>Autofac</strong></li></ul><h4 id="Object-Mapping"><a href="#Object-Mapping" class="headerlink" title="Object Mapping"></a>Object Mapping</h4><ul><li><strong>AutoMap</strong></li><li>Mapster</li></ul><h4 id="Job-Schedule"><a href="#Job-Schedule" class="headerlink" title="Job&amp;Schedule"></a>Job&amp;Schedule</h4><ul><li><strong>Hangfire</strong></li><li>Quartz</li></ul><h4 id="Authentication-Authorization"><a href="#Authentication-Authorization" class="headerlink" title="Authentication&amp;Authorization"></a>Authentication&amp;Authorization</h4><ul><li>ASP.NET Core Identity</li><li>IdentityServer4</li></ul><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><ul><li><strong>EF Core</strong></li><li><strong>Dapper</strong></li><li>SmartSql</li></ul><h4 id="Fault-Recovery"><a href="#Fault-Recovery" class="headerlink" title="Fault Recovery"></a>Fault Recovery</h4><ul><li><strong>Polly</strong></li></ul><h4 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h4><ul><li>ASP.NET Bollerplate Project(ABP)</li><li><strong>ABP VNext</strong></li></ul><h4 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h4><ul><li>Swagger</li></ul><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><ul><li><strong>gRPC</strong></li></ul><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><ul><li><p>Framework</p><ul><li><strong>XUnit</strong></li><li>MSTest</li><li>NUnit</li></ul></li><li><p>Tools</p><ul><li><strong>Moq</strong></li></ul></li><li><p>PostMan</p></li><li><p><a href="http://genfu.io/">GenFu</a>-use to generate realistic test data</p></li><li><p>CURL</p></li></ul><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><ul><li>Disconf</li><li><strong>Consul</strong></li></ul><h4 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h4><ul><li>MemoryCache</li><li><strong>Redis</strong></li><li>Memcached</li></ul><h4 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h4><h4 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h4><ul><li>Log4Net</li><li>ExceptionLess</li><li><strong>Serilog</strong></li></ul><h4 id="Tracing"><a href="#Tracing" class="headerlink" title="Tracing"></a>Tracing</h4><ul><li><strong>Skywalking</strong></li></ul><h4 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h4><ul><li>SQL Server</li><li>MongoDB</li><li>Redis</li></ul><h4 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h4><ul><li>Elasticsearch</li></ul><h4 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h4><ul><li><strong>RabbitMQ</strong></li><li>Apache Kafka</li><li>ActiveMQ</li></ul><h4 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h4><ul><li><strong>Ocelot</strong></li></ul><h4 id="Big-Data"><a href="#Big-Data" class="headerlink" title="Big Data"></a>Big Data</h4><ul><li>Data Accelerator</li><li>.NET for Apache Spark</li></ul><h4 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h4><ul><li><strong>Nginx</strong></li><li>Envoy</li></ul><h4 id="Email-Send"><a href="#Email-Send" class="headerlink" title="Email Send"></a>Email Send</h4><ul><li>LumiSoft.Net</li></ul><h4 id="Performance-Analysis"><a href="#Performance-Analysis" class="headerlink" title="Performance Analysis"></a>Performance Analysis</h4><ul><li>MiniProfiler</li></ul><h4 id="Excel-Operation"><a href="#Excel-Operation" class="headerlink" title="Excel Operation"></a>Excel Operation</h4><ul><li><strong>EPPlus</strong></li></ul><h3 id="领域驱动设计"><a href="#领域驱动设计" class="headerlink" title="领域驱动设计"></a>领域驱动设计</h3><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><ul><li>Controller</li><li>Validation</li><li>Mapping</li><li>Authentication</li><li>Authorization</li><li>Command Handler</li><li>Domain EventHandler</li><li>Integration EventHandler</li><li>Query Handler</li></ul><h4 id="DomainModel"><a href="#DomainModel" class="headerlink" title="DomainModel"></a>DomainModel</h4><ul><li>Aggregate</li><li>Entity</li><li>ValueObject</li><li>DomainEvent</li></ul><h4 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h4><ul><li>Repository</li><li>UnitOfWork</li><li>DbContext</li><li>Transcation</li></ul><h4 id="Infrastructure"><a href="#Infrastructure" class="headerlink" title="Infrastructure"></a>Infrastructure</h4><ul><li>Config</li><li>EventBus</li><li>Caching</li><li>Logging</li><li>…</li></ul><h3 id="ABP架构思想"><a href="#ABP架构思想" class="headerlink" title="ABP架构思想"></a>ABP架构思想</h3><ul><li>Module模块化</li><li>工作单元</li></ul><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><h3 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h3><h4 id="编程范式与设计模式"><a href="#编程范式与设计模式" class="headerlink" title="编程范式与设计模式"></a>编程范式与设计模式</h4><h4 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h4><h4 id="软件架构设计"><a href="#软件架构设计" class="headerlink" title="软件架构设计"></a>软件架构设计</h4><h4 id="整洁与重构"><a href="#整洁与重构" class="headerlink" title="整洁与重构"></a>整洁与重构</h4><h4 id="协作与项目管理"><a href="#协作与项目管理" class="headerlink" title="协作与项目管理"></a>协作与项目管理</h4><h3 id="个人知识体系"><a href="#个人知识体系" class="headerlink" title="个人知识体系"></a>个人知识体系</h3><h4 id="思维脑图"><a href="#思维脑图" class="headerlink" title="思维脑图"></a>思维脑图</h4><h4 id="学习路径-进阶指南"><a href="#学习路径-进阶指南" class="headerlink" title="学习路径&amp;进阶指南"></a>学习路径&amp;进阶指南</h4><h4 id="资源列表-书籍列表"><a href="#资源列表-书籍列表" class="headerlink" title="资源列表&amp;书籍列表"></a>资源列表&amp;书籍列表</h4><h4 id="速学速查手册"><a href="#速学速查手册" class="headerlink" title="速学速查手册"></a>速学速查手册</h4><h4 id="面试指南"><a href="#面试指南" class="headerlink" title="面试指南"></a>面试指南</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ASP-NET-Core框架&quot;&gt;&lt;a href=&quot;#ASP-NET-Core框架&quot; class=&quot;headerlink&quot; title=&quot;ASP.NET Core框架&quot;&gt;&lt;/a&gt;ASP.NET Core框架&lt;/h3&gt;&lt;h4 id=&quot;一次请求的奇妙旅程&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term=".NETCore" scheme="https://www.wuzhaoyang.fun/categories/NETCore/"/>
    
    
    <category term=".NETCore" scheme="https://www.wuzhaoyang.fun/tags/NETCore/"/>
    
  </entry>
  
  <entry>
    <title>To Be YourSelf</title>
    <link href="https://www.wuzhaoyang.fun/2023/11/28/To%20Be%20YourSelf/"/>
    <id>https://www.wuzhaoyang.fun/2023/11/28/To%20Be%20YourSelf/</id>
    <published>2023-11-28T06:59:00.000Z</published>
    <updated>2023-11-28T07:05:45.861Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="追溯到知识的源头"><a href="#追溯到知识的源头" class="headerlink" title="追溯到知识的源头"></a>追溯到知识的源头</h3><ul><li>阅读各种资料、书籍、文章，只是让你懂得更多，并不会让你提高技能。只有通过练习（practice）才能提高技能。如果你想变得更好，那就去动手做。</li><li>去读书不要去读他人消化过的知识</li><li>重要的是在路上，重要的是，你不放手</li></ul><h3 id="理想就是财富的一部分"><a href="#理想就是财富的一部分" class="headerlink" title="理想就是财富的一部分"></a>理想就是财富的一部分</h3><ol><li>制定远大的目标</li><li>坚持去做真正有价值的事，哪怕这件事极少有人在做</li><li>找到人生的兴趣、激情、方向</li><li>找到使你快乐、有价值的事情，坚持去做</li></ol><h3 id="费曼技巧"><a href="#费曼技巧" class="headerlink" title="费曼技巧"></a>费曼技巧</h3><p><strong>费曼技巧，总共分为四步：</strong></p><ol><li><p>选择一个你想要理解的概念：明确需要学习和理解的目标</p></li><li><p>设想一种场景，你正要向别人传授这个概念</p><p>想象一个场景或者拿一张白纸，就好像你正在教一位初次接触这个概念的学生一样，用简单的语言表达你的概念。在这个过程中，你会更清楚地意识到关于这个概念你理解了多少，以及是否还存在理解不清的地方。</p></li><li><p>如果你感觉卡壳了，就回顾一下学习资料</p><p>如果你感觉卡壳了，就要回到最初的学习资料并重新学习让你感到卡壳的部分，直到你领会顺畅，可以在纸上解释这个部分为止。</p></li><li><p>为了让你的讲解通俗易懂，请简化语言表达</p><p>用你自己的语言，而不是学习资料中的语言来解释概念。你要努力简化语言表达，或者与已有的知识建立一种类比关系，以便更好地理解它。</p></li></ol><p><strong>费曼技巧具体应用方式：</strong></p><ol><li>向不熟悉某议题的人解释该议题，用他们能理解的方式及最简单的语言向他们解释</li><li>发现自己不能理解的地方或不能简单解释某议题的地方并记录</li><li>回头查看资讯来源并研读自己薄弱的地方直到能用简单的语言来解释</li><li>重复前面三项步骤直到能够专精这个议题</li></ol><p><strong>费曼学习法的核心</strong>是——当你准备学习一门新知识时，必须站在传授者的立场，假设自己要向别人讲解这门知识。那么你一定要用最简洁、清晰和易于理解的语言表达出来，才能让行外的人也能听懂。</p><p>费曼说：“最好是几岁的小孩也能明白你在说什么。”为此，他制定了一个简单易行的流程：</p><ol><li>确立你要学习的目标。找到和列出自己想要了解的知识，可以是一本书，也可以是一门技术，甚至是你能想象到的任意领域和事物。</li><li>理解你要学习的对象。针对这个目标，准备好和筛选相关的资料，选择可靠和多个角度的信息来源，把这些内容系统化地归纳整理出来。</li><li>以教代学，用输出代替输入。模拟一个传授的场景，用自己的语言把这些知识讲给别人，用以检查自己是否已经掌握了这些知识。</li><li>进行回顾和反思。对其中遇到阻碍、模糊不清和有疑义的知识重新学习、回顾和反思。如有必要，可以重整旗鼓，进行再一次输出。</li><li>实现知识的简化和吸收。最后，通过针对性的简化和整合，实现这些知识的内化和有效的应用。</li></ol><p>在输出知识的过程中，你可以站在另一个“自我”的角度审视这些内容。那个“自我”是知识的讲解者，你由此获得了一个检验自身学习成果的机会。你要把学到的东西有逻辑、有结构地传达出来，看看它是否具有吸引力和传播力。</p><p>如果你自己和别人都没有听懂，也不觉得多么有用，那它怎能称得上是已经被学到的知识呢？知识的输出越多，我们对于陌生事物的联想就越丰富，学习的创新性就越强，最终成功地突破旧知识的框架，得出有价值的新知识。</p><p>费曼认为，输出不仅仅是学习的最佳方式，同时也是学习的终极目的——当我们要学习一种新知识时，用最直白的语言去阐述它时，大脑就会从记忆库中提取那些熟悉的信息，在旧的知识和新的概念中产生强大的关联，新的知识便容易得到大脑彻底的理解。</p><p>最重要的一步是，你要反复地进行这一过程，使大脑多进行创造性的联想，我们对新知识的吸收和应用的能力才会变得更强。</p><p><strong>费曼技巧扩展：</strong></p><ul><li><p>拆分问题：当你想了解一个复杂的知识点时，需要把它分而化之，切成小知识块，再逐个对付</p></li><li><p>压缩知识：一本书很厚，里面的信息容量很大，我们无法记住所有的内容。但聪明的人会把书本呈现的信息进行压缩，提炼出规律和知识，来达到和原有的知识体系产生联系。压缩知识的过程，也是理解和内化的过程。</p></li><li><p>他好像什么都懂了，做起来却一塌糊涂；他学了很多，又好像什么都没学会</p></li><li><p>验证你是否真正掌握一个知识，就在于看你能否用直白浅显的语言把复杂深奥的问题和知识讲清楚。</p></li><li><p>费曼说：“只有在运用知识去做事时你才会发现，这个知识点为何我没有印象？这时你才意识到自己并没有真正地理解所学的知识。”</p></li></ul><p>费曼曾经说：</p><ul><li>“我们为何学习呢？“</li><li>“知识对我们究竟意味着什么？“</li><li>“知识的本质又是什么？“</li></ul><p>解决了这三个问题，我们也就找到了人生的答案。无论我们去学习何种知识，都能把它融入我们的生活场景中，化作属于自己的力量。</p><p><a href="https://postimg.cc/RWfzyZ4S"><img src="https://i.postimg.cc/DwpyWSNX/Pyramid-learning-method.jpg" alt="Pyramid-learning-method.jpg"  /></a></p><h3 id="我对世界充满了疑惑"><a href="#我对世界充满了疑惑" class="headerlink" title="我对世界充满了疑惑"></a>我对世界充满了疑惑</h3><h4 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h4><ul><li><p>做一个真正的明白人，心中有墨水，心中有底气，然后无所畏惧，遇到什么瓶颈都不虚</p></li><li><p>要时常做自我总结、阶段性总结、一日三省吾身</p></li><li><p>收集、整理、思考、实践、分享</p></li><li><p>以前都是我们告诉你做什么，从现在开始，你必须自己回答这个问题了，我期待你来告诉我，什么事情需要做。</p></li><li><p>找到那些比你水平更高、更聪明的人，尽量和他们在一起，吃饭或者喝咖啡，向他们讨教，了解他们拥有的知识。你的职业，甚至你的生活，都会因此变得更好。</p></li><li><p>愿你找到属于自己的快乐，发现属于自己的星空</p></li><li><p>你是愿意就这样学点皮毛混口饭吃随波逐流，还是成为真正的开发业界顶尖技术大牛，推动业界的发展，去改变世界？</p></li><li><p>原来我并不是畏惧平庸，而是害怕天赋永不显露，害怕努力不得回报。可至少有人愿意与我同行，有人愿与在前指引，我也得以跌跌撞撞地一直前进。希望终有一天，我技能强大，内心强大</p></li><li><p>成长必须经历一个步骤，就是把知识内化成能力。知识是用脑记住的，能力是用手练习出来的。</p><p>在工作的几年里，我们可能看过很多书，听过很多技术讲座和视频，但是通过听和看只是让你能记住这些知识，这些知识还不能转换成你的能力。听和看只是第一步，更重要的是实践，通过刻意练习把听到和看到的知识内化成你的能力。刻意练习，就是有目的的练习，先规划好，再去练习。</p><p>首先给自己定一个目标，目标可以有效的引导你学习，然后使用3F练习法：</p><ol><li>专注（Focus），专注在眼前的任务上，在学习过程中保持专注，可以尝试使用番茄工作法</li><li>反馈（Feedback），意识到自己的不足，学习完之后进行反思，思考下自己哪些方面不足，为什么不足</li><li>修正（Fix），改进自己的不足。如果你对现状不满意，那么你只能打自己两耳光，你之前的所有决定导致了你的现状。然后，开始做更好的选择。</li></ol><p>不停的练习和思考可以改变大脑结构，大脑像肌肉一样，挑战越大，影响越大，学习更高效，并且也会产生突破性。<br><strong>首先要确定学习的知识领域，需要达成的学习目标，针对目标制定学习计划，就像你要写一本书一样，先把目录写出来，然后根据目录上的知识点逐步去学习，最后把这些知识点关联起来，形成一个系统化的知识体系。学习的时候，可以制定一个计划，以周为单位，比如第一周学什么，第二周学什么。</strong></p></li><li><p>“你的想法会大幅度影响你的行为。当你的大脑告诉你“做不了”，你却仍然选择行动，结果就会开始改变。”</p></li><li><p>年轻人最核心的能力是坚持长久的做一件事，比如坚持十年</p></li><li><p>人最核心的能力就是把自己能做到的事情做到位</p></li><li><p>所有人都想永远挑战自我，但实际生活中人们主要的时间都在做一些驾轻就熟的事情。</p></li><li><p>与天斗其乐无穷与地斗其乐无穷与人斗其乐无穷也</p></li></ul><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ul><li><p>“有问题就会有答案”</p></li><li><p>找到属于自己的路</p></li><li><p>模仿是成长的捷径</p></li><li><p>所以你想要什么?</p></li><li><p>选择做困难的事情</p></li></ul><h4 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h4><ul><li>“只有有了梦想，确定了目标，你才有更大的积极性去学习”</li><li>只有梦想才能驱除迷茫。迷茫就像是一间黑暗的屋子，你光想着把黑暗扫出屋子，是永远做不到的。但当你在屋子里点亮一盏灯，哪怕只是很小的灯、很微弱的光，也能够让这个屋子不再黑暗。梦想就是这盏灯。</li><li>“要敢于做梦，只要有梦想，你的人生就会一步一步向上走。”</li><li>“成功者和失败者的区别就在于，失败者即使在没有困难的情况下也会对自己的工作感到厌烦，而成功者即使面对重重困难，但内心仍然愿意选择自己所从事的工作，他会享受这种奋斗甚至煎熬的整个过程，当战胜困难之后，他内心获得的快乐是无法用语言来表达的”</li><li>“永远不要说：不可能，而要问：如何才能做到？答案就隐藏在问题中，你把问题分析透彻以后，答案自然就会浮现了”</li></ul><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><ul><li>程序员没有必要局限在一种语言或工具。工具每天都在变化，只要新工具适合你的用例，就可以选择它。你的标准应该是，选择最能够快速有效地解决问题的任何语言或工具。</li><li>最终成为的是一个优秀的程序员还是一个很烂的程序员，这跟你的出身一点关系都没有。而真正的原因只有一个，唯一的一个：对你所做的事情的理解越深，你就会做的越好。</li><li>最好的程序员不是善于编写复杂代码，而是有能力为复杂的问题提出简单的解决方案。只有糟糕的程序员，才会对简单的问题提出复杂的解决方案。</li><li>有人会说，该知道的我都知道了。而对说这话的人的验证就是看他们能有应用他们知道的知识的能力。<ul><li>是否他能够构造出完美的系统架构，让人们能轻松的维护？</li><li>是否他能在不皱眉头的情况下把一个普通程序员毫无可能解决的问题轻松解决掉？</li><li>是否他能在被询问时能用最简单的概念把任何问题都阐述明白？</li><li>如果能够，那他就是一个杰出的程序员，他能很好的理解了他在做的事情。</li></ul></li><li>然而，尽管这些人看起来已经“无所不知”，很多的程序员(包括我)都感觉他们仍然在知识的海洋里奋斗不已。有如此多的东西需要去学习，一个人几乎要花费他毕生的心力去学习，但仍然很难说能掌握计算机知识的90%。</li><li><strong>而这场持久战中的秘密武器、战胜计算机知识的亚瑟王的神剑，就是透彻理解。</strong>对你的领域里的基础知识理解的越好，你就越容易提升到更高的层次。你对这一层次的知识理解的越好，你就更容易掌握下一层次，以此类推。一旦你从最简单最基础的知识走到最高级最复杂的理论，你可以从头再过一遍，此时你会惊奇的发现，在最低最底的底层，竟然还有那么多知识需要学习。</li><li>看起来这个道理实在是太简单，难以受到重视，但事实就是这样。<strong>通往杰出的程序员的道路就是完全的深入的理解，从掌握精通最基本的知识开始，从而逐渐牢固掌握更高级的知识。</strong></li><li>工作要用的事情就应该占用工作时间去研究，课余的时间当然是花在提高自己的元编程水平上：大概就是算法啊、架构啊、设计模式啊、单元测试啊各种任何语言都用得上的东西了。</li><li>超级程序员跟那些平庸的、一般的程序员比起来，对自己要做的事情的理解要深的多的多。这就是原因。要想成为一名出色的程序员，你所要做的就是完全的理解要在做的事情。</li><li>软件架构充满了妥协，是因为生活本身是复杂的，而生产资料是有限的。</li><li>新功能大部分人都可以写,但是解决问题的能力,或者说当你需要优化当前代码的时候就需要基础架构的能力。这个能力往往是新手不具备的，因为他们不会遇到这样的场景也不具备基础架构深入思考的能力。</li><li>全面的测试，良好的文档记录和可靠的自动化功能</li></ul><h3 id="高效学习策略"><a href="#高效学习策略" class="headerlink" title="高效学习策略"></a>高效学习策略</h3><h4 id="高效学习策略-1"><a href="#高效学习策略-1" class="headerlink" title="高效学习策略"></a>高效学习策略</h4><ol><li><p>重复：重复是通向精通的必由之路</p><p>我坚信重复是通向精通的必由之路。当我们学习一种新的技能，必须经常性地对这种技能加以练习。当我们学习一种新的知识或理论，也必须对尽可能多地对其加以应用。李小龙曾经讲过一句非常经典的名言，『我从不畏惧一个知道一万种踢法的人，但是我害怕一个把一种踢法练习过一万次的对手。<br>任何一种技能，只要经过连续不断地磨练和改进，最终效果都将变得异常惊人。</p></li><li><p>专注：专注的真正含义在于，当你同时面对几百个好想法时，你必须精挑细选。</p><p>现代生活中的干扰因素太多 - 社交媒体、多任务、开放式学习与办公环境 - 我们总是能不断地收到来自外部的各种刺激信号。我们已经丧失了专注的能力。然而专注是学习和掌握很多科目和专业必备的前提条件。<br>为了学习一种新的技能，我尽量让自己处于一个没有打扰的环境之中。当我阅读一些东西时，我会听一些没有歌词的纯音乐，这样的话，我的注意力就不会被分散了。<strong>史蒂夫·乔布斯说过，”人们通常认为专注意味着，对你正在做的事情说 Yes，实际上根本不是这样。专注的真正含义在于，当你同时面对几百个好想法时，你必须精挑细选。”</strong></p></li><li><p>背景与细节：不停地在细节和上下文之间来回切换</p><p>为了理解一门学科，我觉得首先你应该对这个学科的概貌有一个大致的了解。我自己就非常喜欢探求一些事物的背景以及来龙去脉。所以，我在阅读一本书之前，总是先浏览一下这本书的目录。这样我就对这本书的内容有了一个基本印象。当我阅读内容细节时，我将对内容中一个主题与另一个主题之间的关系就更加清晰了。细节非常重要，但是要在合适的时机。<strong>过早地开始关注细节，你很可能错失上下文或整体信息。当然，错失了细节，也会让你的理解仅仅停留在一些事物的表面。</strong>所以，我会不停地在细节和上下文之间来回切换。这样我就能够在获取知识或技能的整体性概念的同时，又能学到具体内容及细节。</p></li><li><p>关系：信息之间的关系</p><p>这种在上下文与细节之间来回切换的学习方式，向我充分展现了信息之间的关系。这一点对于学习与记忆的长期效果来说，非常非常重要。这就是为什么当我们谈论某一局牌时，有人能够绘声绘色地回忆起每一个细节。其实诀窍就在于牌与牌之间的关系。<strong>在不同主题之间构建一种有意义的关系或联系，就是加速学习和强化长期记忆的最有效手段。</strong></p></li><li><p>节奏</p><p>节奏是学习过程中最有趣的一个可变因素。例如，如果你正在听一场在线视频讲座，你可以加速这个讲座的播放速度（如以两倍速率播放）。</p><p>节奏还有一个重要功能。它能够让我们置身于完全不同的环境和压力之下。为了适应这种变换，我们自身会自发地调节相应的学习方法。刻意让自己体验这种不断变化的学习节奏，能够更好地强化我们的学习效果和学习能力。长跑运动员训练冲刺式的速跑，就是为了磨练自己对不同状况路面的适应性。就我个人而言，如果我正在准备一场演讲或者技术演示，我会在最后一次练习中以两倍语速讲话。这样做就是为了确保，在我面临外部压力之下（公开场合演示），可以记起所有的演讲内容和信息。如果在语速加倍的情况下，我都能回忆起这些信息，我自然能在正常语速下，轻松地想起这些内容。变换节奏不只是与回忆或记忆相关，其实这样做在很大程度上，能够激发和改变学习的潜能和活力 - 为你的学习工具箱添加一个灵活的新工具。</p></li></ol><h4 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h4><p><strong>刻意练习，就是有目的的练习，先规划好，再去练习。</strong></p><p>在工作的几年里，我们可能看过很多书，听过很多技术讲座和视频，但是通过听和看只是让你能记住这些知识，这些知识还不能转换成你的能力。</p><p><strong>听和看只是第一步，更重要的是实践，通过刻意练习把听到和看到的知识内化成你的能力。刻意练习，就是有目的的练习，先规划好，再去练习。</strong></p><p>首先给自己定一个目标，目标可以有效的引导你学习，然后使用3F练习法：</p><ol><li>专注（Focus），专注在眼前的任务上，在学习过程中保持专注，可以尝试使用番茄工作法</li><li>反馈（Feedback），意识到自己的不足，学习完之后进行反思，思考下自己哪些方面不足，为什么不足</li><li>修正（Fix），改进自己的不足。不停的练习和思考可以改变大脑结构，大脑像肌肉一样，挑战越大，影响越大，学习更高效，并且也会产生突破性</li></ol><p><strong>首先要确定学习的知识领域，需要达成的学习目标，针对目标制定学习计划，就像你要写一本书一样，先把目录写出来，然后根据目录上的知识点逐步去学习，最后把这些知识点关联起来，形成一个系统化的知识体系。</strong>学习的时候，可以制定一个计划，以周为单位，比如第一周学什么，第二周学什么。</p><p>成长必须经历一个步骤，就是把知识内化成能力。知识是用脑记住的，能力是用手练习出来的。</p><h4 id="番茄工作法"><a href="#番茄工作法" class="headerlink" title="番茄工作法"></a>番茄工作法</h4><p>番茄工作法的关键是：规划，追踪，记录，处理，以及可视化。</p><ul><li>在规划阶段，任务被根据优先级排入”To Do Today” list。 这允许用户预计每个任务的工作量。</li><li>当每个番茄时结束后，成果会被记录下来以提高参与者的成就感并为未来的自我观察和改进提供原始数据。</li><li>番茄时意指每个工作时段的时长。当任务完成后，所有番茄计时器剩下的时间会被用于过度学习。</li><li>短休息时间可以辅助达到心理学上的同化作用，3-5分钟的短休息间隔开每个番茄工作时段。</li><li>四个番茄工作时组成一组。一个15-50分钟的长休息间隔开每组作业。</li><li>这一时间管理技术的本质目的是减少内生和外在的干扰对意识流的影响。一个单位的番茄工作时不可再细分。</li><li>当在番茄工作时中被打断的情况下，只可能有两种情况：干扰的活动被推迟（告知 - 协商 - 安排日程 - 回访），或者当前的番茄工作时废弃，必须重新开始。</li></ul><p><strong>具体实践：</strong></p><ol><li>决定待完成的任务</li><li>设定番茄工作法定时器至 n 分钟（通常为25分钟）</li><li>持续工作直至定时器提示,记下一个番茄</li><li>短暂休息3-5分钟</li><li>每四个番茄，休息15-30分钟</li></ol><h4 id="技术的学习与练习"><a href="#技术的学习与练习" class="headerlink" title="技术的学习与练习"></a>技术的学习与练习</h4><p>练习式学习。我的模式比较固定，一般是就是这么几步：</p><ol><li>实践一些新的技术和概念（要比其它人快半步）</li><li>抽取这些技术和概念，造建一个新的轮子</li><li>把造轮子、实践的过程写成文章</li><li>系统性的把这些文章整理成电子书</li><li>先无脑地输入，再总结、思考输出，最后系统性整理。</li></ol><h3 id="没有规划就没有效率"><a href="#没有规划就没有效率" class="headerlink" title="没有规划就没有效率"></a>没有规划就没有效率</h3><ol><li><p>第一个现实是，人人都有选择权</p></li><li><p>第二个现实是，只有少数几件事，是重要的</p><p>透过现象看本质思维。花半秒钟就看透事物本质的人，和花一辈子都看不清事物本质的人，注定是截然不同的命运</p></li><li><p>第三个现实是，没有规划就没有效率</p><ul><li>“简洁思维”就是做出“更少，但更好”的选择，通过合理规划，高效到达目标。</li><li>以终为始思维。就是搞明白你究竟要的是什么，然后再反过来倒推具体的行动步骤。</li><li>即时反馈思维。有一种很有效的学习方法叫“费曼技巧”。通俗的说，就是将你刚刚学到的东西，用大白话的形式讲给别人听，如果能讲清楚，那么说明真的理解了。而费曼的过程就是不断地给自己创造即时反馈的过程。<strong>一个人做需要长期坚持的事情，都是需要去给自己正向反馈的。</strong></li></ul></li><li><p>成为有目标的学习者</p></li><li><p>编程能力</p><ul><li>好书读多了 你就明白：技术是一环扣一环的，有牢固的技术知识体系，学啥都事半功倍。 </li><li>源码看多了 你就明白：自己的查克拉莫名的增多了。而且吐槽文档不全的习惯也渐渐少了，一个不服就跑去观摩别 人的源码，顺便偷个师。<br>再往后，或许你的技术确实突飞猛进了，然而你却只会觉得编程本来就是这个样子的。 因为，<strong>但凡通过点滴付出，累积出来的结果，都是平淡无声的。</strong></li><li>有目的的练习，尤其是一个完整的应用问题的解决，是学习的不二法门。学习系统设计的最佳途径是看一个优秀设计的源码，检验成果的方式是改造它应用于你的实际场景。</li></ul></li></ol><h3 id="多周目知识树学习法"><a href="#多周目知识树学习法" class="headerlink" title="多周目知识树学习法"></a>多周目知识树学习法</h3><p>先说多周目，周目就是轮次的意思，经常玩游戏的同学应该会知道，很多剧情都要二周目甚至三周目才能玩出来。这里借用的就是这个概念。作为初学者，我们不奢求一次吃个胖子，我们分多次来学习。</p><ol><li><p>第一遍看全局，知道有哪些东西，每一部分都是干什么用的，哪些重要，哪些不重要。</p></li><li><p>第二遍重原理，从最核心的原理出发，一步一步尝试以最短的路径走通整个流程，完成核心任务。</p></li><li><p>第三遍补周边，把之前做的方案拿出来，看看哪些地方可以优化，哪些地方能做得更好。这么几遍下来，每次的学习难度降低了不少，而我们对知识的理解却深入了很多。</p></li><li><p>然后是知识树。就像前文所说，知识点并不是平等的。我们需要在理解本质和原理的基础上，梳理出一颗知识树。在这棵树上，我们应该可以清晰的看到哪些知识是核心、那些知识是周边，我们为什么要学它、学了它能用到那些地方。</p><p>每个人的知识树可能不一样，会随着你的理解进行调整。初学者往往很难立马建立起来完整的知识树，这时候可以借助一些学习路线图作为样本。</p></li></ol><h3 id="努力是没有用到的"><a href="#努力是没有用到的" class="headerlink" title="努力是没有用到的"></a>努力是没有用到的</h3><ul><li>人生就像走阶梯，每一阶有一阶的难点。成功的人生是台阶式向上，而不是一条水平线。努力只是说明你拼命在走，跟你能不能向上走关系不大。那些努力却没有结果的人，根本原因就在于他一直走在平面上，没有走到更高的台阶。</li><li>垂直方向的努力更有意义，水平方向的努力意义不大。</li></ul><h3 id="什么才是你的核心竞争力"><a href="#什么才是你的核心竞争力" class="headerlink" title="什么才是你的核心竞争力"></a>什么才是你的核心竞争力</h3><ul><li><p>知道自己在做什么。几年后自己能达到什么样的程度</p></li><li><p>95%的程序员都是平均水准。你所接触到的优秀程序员能够做到的，你也可以做到</p></li><li><p>人才作为资源的一种，也是同样的道理。而稀缺性，换种说法也可以叫做不可替代性。一种资源越是稀缺，不可替代性就越强</p></li><li><p>以下的知识技能组合是具有相当程度的不可替代性的</p><ol><li>专业领域技能：成为一个专业领域的专家，你的专业技能越强，在这个领域的不可替代性就越高。</li><li>跨领域的技能：解决问题的能力，创新思维，判断与决策能力，Critical-Thinking，表达沟通能力，Open Mind ，等等。</li><li>学习能力：严格来说，学习能力也属于跨领域的技能，但由于实在太重要，并且跨任何领域，所以独立出来。如何培养学习能力，到目前为止我所知道的最有效的办法就是持续学习和思考新知识。</li><li>性格要素：严格来说这也属于跨领域技能，理由同上。一些我相信很重要的性格要素包括：专注、持之以恒、自省（意识到自己的问题所在的能力，这是改进自身的大前提）、好奇心、自信、谦卑（自信和谦卑是不悖的，前者是相信别人能够做到的自己也能够做到，后者是不要总认为自己确信正确的就一定是正确的，Keep an open mind）等等</li></ol></li><li><p>知识组合：</p><p>管理知识组合与管理金融组合非常相似：</p><ol><li>认真的投资者定期投资是–作为一种习惯。</li><li>多样化是长期成功的关键。</li><li>聪明的投资者在保守投资和高风险、高回报投资之间保持平衡。</li><li>投资者试图低买高卖以获得最大回报。</li><li>投资组合应定期审查和重新平衡。</li></ol><p>目标：既然你已经有了一些关于添加什么以及何时到你的知识投资组合的指导方针，那么什么是获得知识的最佳方式来为你的投资组合提供资金呢？这里有一些建议。</p><ul><li>每年至少学习一门新语言</li></ul><p>  不同的语言解决相同的问题会有不同的方式。</p><p>  通过学习几种不同的方法，可以帮助你拓宽你的思路，避免陷入陈规。此外，由于有大量的免费软件，学习许多语言是很容易的。</p><ul><li><p>每个月看一本技术书</p><p>虽然网上有大量的短文，偶尔也有可靠的答案，但要深入理解，你需要长文书。浏览书商，寻找与当前项目相关的有趣主题的技术书籍。</p><p>一旦养成习惯，每月读一本书。在你掌握了你目前正在使用的技术之后，分门别类地研究一些与你的项目无关的技术。</p></li><li><p>阅读非技术类的书</p><p>重要的是记住，计算机是由那些你试图满足其需求的人使用的。</p><p>你和别人一起工作，被别人雇佣，被别人攻击。别忘了人性里平等的一面，因为这需要完全不同的技能集（我们讽刺地称之为软技能，但它们实际上很难掌握）。</p></li><li><p>上课</p><p>在当地大学或在线学院，或在附近的贸易展览或会议上寻找有趣的课程</p></li><li><p>参加本地用户组和聚会</p><p>不要只是去听，而是积极参与。与世隔绝对你的职业生涯是致命的；找出你公司以外的人在做什么。</p></li><li><p>试验不同环境</p><p>如果你只在 Windows 系统工作，花点时间在 Linux 上，</p><p>如果您只使用 makefile 和编辑器，请尝试使用具有高端功能的复杂IDE，反之亦然。</p></li><li><p>保持自我更新</p></li></ul><p>  在网上阅读与当前项目不同的技术新闻和帖子。这是一个很好的方法，可以发现其他人对它有什么体验，他们使用的特定术语等等</p><p>  继续投资很重要。一旦你对新语言或新技术感到满意，就继续吧。再学一个。</p><p>  不管你是否在一个项目中使用过这些技术，甚至是否你把它们写在简历上。</p><p>  学习的过程会扩展你的思维，为你打开新的可能性和新的做事方式。</p><p>  异花授粉的想法是很重要的；尝试把你学到的经验应用到你当前的项目中。即使你的项目不使用这种技术，也许你可以借用一些想法。</p><p>  例如，熟悉对象定向，您将以不同的方式编写过程程序。理解函数式编程范式，您将以不同的方式编写面向对象的代码，依此类推。</p><ul><li>不要让问题停在那儿。 把它当作个人的挑战来寻找答案</li></ul></li><li><p>成长：</p><ul><li><p>认知：要在认知上超过别人，就要在下面几个方面上做足功夫</p><ul><li><p>信息渠道：信息的源头</p><p>试想如果别人的信息源没有你的好，那么，这些看不见信息源的人，只能接触得到二手信息甚至三手信息，只能获得被别人解读过的信息，这些信息被三传两递后必定会有错误和失真，甚至会被传递信息的中间人hack其中的信息（也就是“中间人攻击”），而这些找不出信息源的人，只能“被人喂养”，于是，他们最终会被困在信息的底层，永世不得翻身。(比如：学习C语言，放着原作者K&amp;R的不用，硬要用错误百出谭浩强的书，能有什么好呢？)</p></li><li><p>信息质量</p><p>信息质量主要表现在两个方面，一个是信息中的燥音，另一个是信息中的质量等级，</p><p>我们都知道，在大数据处理中有一句名言，叫 garbage in garbage out，你天天看的都是垃圾，你的思想和认识也只有垃圾。</p><p>所以，如果你的信息质量并不好的话，你的认知也不会好，而且你还要花大量的时间来进行有价值信息的挖掘和处理。</p></li><li><p>信息密度</p><p>优质的信息，密度一般都很大，因为这种信息会逼着你去干这么几件事，</p><ol><li>搜索并学习其关联的知识</li><li>沉思和反省</li><li>亲手去推理、验证和实践……</li></ol><p>一般来说，经验性的文章会比知识性的文章会更有这样的功效。比如，类似于像 Effiective C++&#x2F;Java，设计模式，Unix编程艺术，算法导论等等这样的书就是属于这种密度很大的书，而像Netflix的官方blog和AWS CTO的blog等等地方也会经常有一些这样的文章</p></li></ul></li><li><p>知识：要在知识上超过别人，你就需要在下面几个方面上做足功夫</p><ul><li><p>知识树（图）</p><p>任何知识，只在点上学习不够的，需要在面上学习，这叫系统地学习，这需要我们去总结并归纳知识树或知识图，一个知识面会有多个知识板块组成，一个板块又有各种知识点，一个知识点会导出另外的知识点，各种知识点又会交叉和依赖起来，学习就是要系统地学习整个知识树（图）。</p><p>而我们都知道，对于一棵树来说，“根基”是非常重要的，所以，学好基础知识也是非常重要的，对于一个陌生的地方，有一份地图是非常重要的，没有地图的你只会乱窜，只会迷路、练路、走冤枉路！</p></li><li><p>知识缘由</p><p>任何知识都是有缘由的，了解一个知识的来龙去脉和前世今生，会让你对这个知识有非常强的掌握，而不再只是靠记忆去学习。</p><p>靠记忆去学习是一件非常糟糕的事。而对于一些操作性的知识（不需要了解由来的），我把其叫操作知识，就像一些函数库一样，这样的知识只要学会查文档就好了。能够知其然，知其所以然的人自然会比识知识到表皮的人段位要高很多。</p></li><li><p>方法套路</p><p>学习不是为了找到答案，而是找到方法。</p><p>就像数学一样，你学的是方法，是解题思路，是套路，会用方程式解题的和不会用方程式解题的在解题效率上不可比较，而在微积分面前，其它的解题方法都变成了渣渣。</p><p>你可以看到，掌握高级方法的人比别人的优势有多大，学习的目的就是为了掌握更为高级的方法和解题思路。</p></li></ul></li><li><p>技能：要在技能上超过别人，你就需要在下面几个方面做足功夫</p><ul><li><p>精益求精</p><p>如果你想拥有专业的技能，你要做不仅仅是拼命地重复一遍又一遍的训练，而是在每一次重复训练时你都要找到更好的方法，总结经验，让新的一遍能够更好，更漂亮，更有效率，否则，用相同的方法重复，那你只不过在搬砖罢了。</p></li><li><p>让自己犯错</p><p>犯错是有利于成长的，这是因为出错会让人反思，反思更好的方法，反思更完美的方案，总结教训，寻求更好更完美的过程，是技能升级的最好的方式。</p><p>尤其是当你在出错后，被人鄙视，被人嘲笑后，你会有更大的动力提升自己，这样的动力才是进步的源动力。当然，千万不要同一个错误重复地犯！</p></li><li><p>找高手切磋</p><p>下过棋，打个球的人都知道，你要想提升自己的技艺，你必需找高手切磋，在和高手切磋的过程中你会感受到高手的技能和方法，有时候你会情不自禁地哇地一下，我靠，还可以这么玩！</p></li></ul></li><li><p>领导力</p><p>最后一个是领导力，要有领导力或是影响力这个事并不容易，这跟你的野心有多大，好胜心有多强 ，你愿意付出多少很有关系，因为一个人的领导力跟他的标准很有关系，因为有领导力的人的标准比绝大多数人都要高。</p><ul><li><p>识别自己的特长和天赋</p><p>首先，每个人DNA都可能或多或少都会有一些比大多数人NB的东西（当然，也可能没有），</p><p>如果你有了，那么在你过去的人生中就一定会表现出来了，就是那种大家遇到这个事会来请教你的寻求你帮助的现象。</p><p>那种，别人要非常努力，而且毫不费劲的事。一旦你有了这样的特长或天赋，那你就要大力地扩大你的领先优势，千万不要进到那些会限制你优势的地方。</p><p>你是一条鱼，你就一定要把别人拉到水里来玩，绝对不要去陆地上跟别人拼，不断地在自己的特长和天赋上扩大自己的领先优势，彻底一骑绝尘。</p></li><li><p>识别自己的兴趣和事业：要有职业也要有事业</p><p>没有天赋也没有问题，还有兴趣点，都说兴趣是最好的老师，当年，Linus就是在学校里对minx着迷了，于是整出个Linux来，这就是兴趣驱动出的东西，</p><p>一般来说，兴趣驱动的事总是会比那些被动驱动的更好。但是，这里我想说明一下什么叫“真∙兴趣”，</p><p>真正的兴趣不是那种三天热度的东西，而是那种，你愿意为之付出一辈子的事，<br>是那种无论有多大困难有多难受你都要死磕的事，<br>这才是“真∙兴趣”，</p><p>这也就是你的“野心”和“好胜心”所在，其实上升到了你的事业。相信我，绝大多数人只有职业而没有事业的。</p></li><li><p>建立高级的习惯和方法</p><p>没有天赋没有野心，也还是可以跟别人拼习惯拼方法的，只要你有一些比较好的习惯和方法，那么你一样可以超过大多数人。</p><p>对此，在习惯上你要做到比较大多数人更自律，更有计划性，更有目标性，比如，每年学习一门新的语言或技术，并可以参与相关的顶级开源项目，<br>每个月训练一个类算法，掌握一种算法，每周阅读一篇英文论文，并把阅读笔记整理出来……自律的是非常可怕的。</p><p>除此之外，你还需要在方法上超过别人，你需要满世界的找各种高级的方法，其中包括，思考的方法，学习的方法、时间管理的方法、沟通的方法这类软实力的，</p><p>还有，解决问题的方法（trouble shooting 和 problem solving），设计的方法，工程的方法，代码的方法等等硬实力的，一开始照猫画虎，时间长了就可能会自己发明或推导新的方法。</p></li><li><p>勤奋努力执着坚持</p><p>如果上面三件事你都没有也没有能力，那还有最后一件事了，那就是勤奋努力了，就是所谓的“一万小时定律”了（参看《21天教你学会C++》中的十年学编程一节），</p><p>我见过很多不聪明的人，悟性也不够（比如我就是一个），别人学一个东西，一个月就好了，而我需要1年甚至更长，但是很多东西都是死的，只要肯花时间就有一天你会搞懂的，</p><p>耐不住我坚持十年二十年，聪明的人发明个飞机飞过去了，笨一点的人愚公移山也过得去，因为更多的人是懒人，我不用拼过聪明人，我只用拼过那些懒人就好了。</p></li></ul></li></ul></li></ul><h3 id="财务管理"><a href="#财务管理" class="headerlink" title="财务管理"></a>财务管理</h3><ul><li>用生产者的视角看待世界，去看消费者需要什么——消费者是需要被满足的大多数人。</li><li>慢车道的核心是工作，快车道的核心是生意</li><li>快车道<ul><li>解密快车道的财富公式：财富 &#x3D; 净收益 + 资产价值，如何使人致富。</li><li>净收益 &#x3D; 销量 x 单元净收益；资产价值 &#x3D; 净收益 x 行业系数。</li><li>快车道生意的关键是销量！它必须是潜力巨大且增长迅速的，最好能呈指数级爆炸增长，这个取决于你的产品&#x2F;服务的市场。</li><li>快车道人们的资产是增值的，生意、品牌、知识产权、商业模式、不动产等。</li></ul></li><li>慢车道<ul><li>慢车道人们的资产是消费品，汽车、电子产品、珠宝、时装、包包等，这种资产从购买之日开始就是贬值的</li><li>慢车道的财富公式：财富 &#x3D; 工作薪水 + 理财收益</li></ul></li><li>“影响力法则”：影响越多的人，就可以赚更多的钱。</li><li>富人们也不是不消费，只不过顺序应该是：先做一个生产者，然后做一个消费者。可大多数人本末倒置，只看到了消费。</li></ul><h3 id="打造自己的产品"><a href="#打造自己的产品" class="headerlink" title="打造自己的产品"></a>打造自己的产品</h3><ul><li><p>首先，拥抱对方的产品种类，进入对方的市场</p><p>拥抱阶段 ：开发与竞争产品基本兼容的软件，或实施公共标准</p></li><li><p>然后，使用自己的专有功能扩展产品标准</p><p>扩展阶段：添加和推广竞争对手或标准不支持的功能</p></li><li><p>最后，利用这些差异，使竞争对手处于不利地位</p><p>扑灭阶段：由于市场份额的扩展，添加的功能成为事实上的标准时，再将竞争对手边缘化</p></li></ul><p>这是你的人生。</p><h3 id="如何构建自己的知识体系"><a href="#如何构建自己的知识体系" class="headerlink" title="如何构建自己的知识体系"></a>如何构建自己的知识体系</h3><p>知识体系是指某人不仅仅是指单一技术领域的能力，更重要的是有完整的系统性结构框架。</p><ul><li><p>技术层次</p><ul><li>0 – 对于相关的技术领域还不熟悉</li><li>1 – 可以读懂这个领域的基础知识</li><li>2 – 可以实现一些小的改动，清楚基本的原理，并能够在简单的指导下自己找到更多的细节。</li><li>3 – 基本精通这个技术领域，完全不需要别人的帮助</li><li>4 – 对这个技术领域非常的熟悉和舒适，可以应对和完成所有的日常工作。<ul><li>对于软件领域 – 有能力开发中等规模的程序，能够熟练和掌握并使用所有的语言特性，而不是需要翻书，并且能够找到所有的冷知识。</li><li>对于系统领域 – 掌握网络和系统管理的很多基础知识，并能够掌握一些内核知识以运维一个小型的网络系统，包括恢复、调试和能解决一些不常见的故障。</li></ul></li><li>5 – 对于该技术领域有非常底层的了解和深入的技能。</li><li>6 – 能够从零开发大规模的程序和系统，掌握底层和内在原理，能够设计和部署大规模的分布式系统架构</li><li>7 – 理解并能利用高级技术，以及相关的内在原理，并可以从根本上自动化大量的系统管理和运维工作。</li><li>8 – 对于一些边角和晦涩的技术、协议和系统工作原理有很深入的理解和经验。能够设计，部署并负责非常关键以及规模很大的基础设施，并能够构建相应的自动化设施</li><li>9 – 能够在该技术领域出一本经典的书。并和标准委员会的人一起工作制定相关的技术标准和方法。</li><li>10 – 在该领域写过一本书，被业内尊为专家，并是该技术的发明人。</li></ul><p><strong>要想精通某一领域，你需要有坚实的基础，并基于此形成自己的知识体系。</strong>通过努力完善自身的技术，把基础打牢，这样你就可以解决任何问题。</p></li><li><p>技术基础</p><ul><li>程序语言：语言的原理，类库的实现，编程技术（并发、异步等），编程范式，设计模式…</li><li>系统原理：计算机系统，操作系统，网络协议，数据库原理…</li><li>中间件：消息队列，缓存系统，网关代理，调度系统 …</li><li>理论知识：算法和数据结构，数据库范式，网络七层模型，分布式系统…</li></ul></li></ul><h3 id="职业规划的长短期目标"><a href="#职业规划的长短期目标" class="headerlink" title="职业规划的长短期目标"></a>职业规划的长短期目标</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--多与高人共处，勤与能人相伴</span><br><span class="line">Ask yourself: what you should do over the next ten or twenty years</span><br></pre></td></tr></table></figure><p>去求职网站看自己的职业岗位大公司有哪些要求，然后之后就专门往那些要求靠拢吧，该考证考证，该培养哪些能力就注重提升。</p><p>我觉得最难的还是找到自己的领域，一个愿意一辈子努力的领域，这个也没什么好说，我的经验是多去试，你不知道自己喜欢擅长什么，但总很容易发现自己讨厌的生活，排除那些你讨厌的，余下自己喜欢的。</p><h4 id="人生11问-长期规划-："><a href="#人生11问-长期规划-：" class="headerlink" title="人生11问(长期规划)："></a>人生11问(长期规划)：</h4><ol><li>你想做哪种类型的工作，自由的还是按照时间安排的？</li><li>你期待的年收入是多少？</li><li>你想住在什么样的房子里，和谁是邻居？</li><li>你想开什么样的车，怎么对待自己的交通时间？</li><li>你想穿什么品牌的衣服？</li><li>你希望别人如何看待你，如何称呼你？</li><li>你想如何帮助别人？</li><li>你想成为一个知识渊博的人吗？</li><li>你希望行走到哪些地方？</li><li>你怎样获得快乐和满足？</li><li>你会成为一个平衡工作，学习和生活的人吗？</li></ol><h4 id="人生7问-短期规划-："><a href="#人生7问-短期规划-：" class="headerlink" title="人生7问(短期规划)："></a>人生7问(短期规划)：</h4><ol><li>你现在的状态是否令自己满意？</li><li>满意的地方和原因是什么？</li><li>不满意的地方和原因是什么？</li><li>你要如何改变当前的状态？</li><li>你开始积累社会资源和人脉了吗？</li><li>你在做着一种平衡的工作吗？</li><li>你敢于对自己说真话、诚恳地直面真实的自己吗？</li></ol><h4 id="如何用8个步骤来制定职业规划："><a href="#如何用8个步骤来制定职业规划：" class="headerlink" title="如何用8个步骤来制定职业规划："></a><a href="https://www.indeed.com/career-advice">如何用8个步骤来制定职业规划</a>：</h4><ol><li><p>了解潜在的职业选择</p></li><li><p>发现不断增长的就业市场</p></li><li><p>确定适合你技能的职业</p></li><li><p>了解职业资格</p></li><li><p>评估工资和其他福利</p></li><li><p>比较可能的职业道路</p><p>在考虑了一些潜在的职业道路之后，比较一下你的选择。一个人可能需要更多的技能和额外的学位，与其他选择相比，这可能更费时或更昂贵。另一个可能有更高的潜在收入。</p><p>接下来，比较每条职业道路与你的核心价值观的匹配程度。一个可以让你发展出更多你渴望拥有的个人品质和人际关系。另一个可能会激励你创作出最好的专业作品。回顾一下你的利弊清单，评估一下哪条职业道路最有可能帮助你实现目标。</p></li><li><p>建立明智的目标</p><p>因为追求一条职业道路可能需要几年的时间，所以把更广泛的目标分成更小的你可以追踪的目标。尝试设定 SMART 目标来引导你完成这个过程:</p><ul><li>Specific具体: 使你的目标尽可能的精确。如果你渴望成为一名教师，设定一个明确的目标，比如在当地的学校系统中找到一份教高中生物的工作。</li><li>Measurable可衡量的: 量化你的进展。设定一些基准，比如完成学士学位或者申请10份符合你要求的工作。</li><li>Attainable可实现的: 设定你能够实现的目标。为了确认你的目标是可以实现的，想想每个步骤，并考虑它们有多现实。</li><li>Relevant相关: 你设定的任何与职业相关的目标都应该是真正重要的。想想这个目标有多重要，它是否能帮助你实现你的长期目标。</li><li>Time-based基于时间的: 给你的目标设定最后期限。</li></ul><p>如果你有一个特定的时间框架，你会更容易达到最终的结果，并激励自己去行动。</p></li><li><p>制定一份职业行动计划</p><p><strong>为你的职业生涯制作一张地图，回顾一下你的 SMART 目标中的行动项目，并列出你需要遵循的步骤。</strong></p><p>然后，把它们放在一张纸上或者电子日历上来建立你的日程表。随时准备好你的职业行动计划，这样你就可以定期回顾它。每完成一个步骤，都要检查一遍，并奖励自己大大小小的成就。根据需要重新审视和修改你的职业行动计划。新的机遇、技术进步、个人优先权和经济趋势都可能导致必要的职业规划变化。</p></li></ol><h4 id="为自己制定职业发展计划的五个步骤"><a href="#为自己制定职业发展计划的五个步骤" class="headerlink" title="为自己制定职业发展计划的五个步骤:"></a><a href="https://www.indeed.com/career-advice/career-development/steps-to-create-a-career-development-plan">为自己制定职业发展计划的五个步骤</a>:</h4><p>设定具体的、可衡量的职业发展目标可以帮助你进入职业生涯的下一个阶段。虽然制定一个职业规划需要大量的工作，但是它会帮助你了解你下一步的职业目标，以及你需要做些什么才能达到这个目标。创建和实施员工职业发展计划可以让你在工作中感到充满动力，即使你还没有找到理想的工作，因为它可以帮助你制定实现梦想的具体计划。</p><p>在这里，我们定义了一个职业发展计划模板，并概述了五个步骤，以轻松和有效地为自己制定一个个人发展计划：</p><ol><li><p>确定你现在的职位</p><p>任何职业发展计划的第一步都是确定你现在在职业生涯中的位置。这个步骤也可以让你反思自己目前的技能和优势。</p><p>在这个阶段，你应该考虑以下问题:</p><ul><li>我过去的经历是什么？</li><li>我喜欢做什么？</li><li>我有什么样的天赋和才能？</li><li>当我在工作中感到最兴奋或最有动力的时候，我在做什么？</li><li>我更喜欢领导一个团队，和同事一起工作还是单独工作？</li><li>什么让我充满活力? 什么消耗我的能量？</li><li>我在生活中有一个特定的使命吗？</li><li>是什么激励着我早上起床去上班？</li></ul><p>花点时间写下这些问题的答案。注意你目前在你所在领域的职位，包括你是否已经完成了你的教育，或者你是否想要追求更多的研究生教育，以及你在职业阶梯上的位置。</p></li><li><p>确定你的目的地</p><p>接下来，通过做以下事情来确定你职业生涯的方向：</p><ul><li>Brainstorm.头脑风暴<ul><li>抛开任何可能阻碍你前进的障碍或禁忌。你的理想职业是什么？</li><li>如果没有什么阻碍你前进的话，5到10年后你想去哪里？</li><li>包括你的终极职业目标。如果你的梦想是成为一家中型公司的首席执行官，那么就把它融入到你的计划中去。</li></ul></li><li>以简明扼要的表述形式制定更具体的目标<ul><li>确定你希望以较小的增量可以达到的位置是很有帮助的</li><li>考虑到你现在所处的位置和你所拥有的技能，你希望你的职业生涯在两年内走向何方？</li><li>这是一个与您当前日常生活足够接近的增量，因此其更容易可视化。</li></ul></li><li>接下来，想想你5到10年后想要达到的目标<ul><li>这是一个更实质性的步骤，需要你想象机会出现的情况下你所能够达到的目标</li><li>你是否想继续留在现在的公司，但是担任更高级的职位？</li><li>你想在另一家公司找到工作吗？或者，你可能想彻底转换职业。确保你的既定目标与最能激励你的事物相一致。</li></ul></li></ul><p>一旦你完成了这两个步骤，你应该对你的技能和你可以选择的职业有一个更好的了解。现在你已经准备好评估如何到达你的目标地点。</p></li><li><p>做差距分析</p><p>在这个阶段，您已经准备好进行差距分析，这将确定您现在的位置和您的目标位置。通过以下步骤完成差距分析:</p><ul><li><p>研究你的职业目标</p><p>以你列出的两年或五年的职业目标为重点，找到你想要的工作类型的工作列表。确保描述符合你的技能和经验，并且要求与你的最终目标一致。</p></li><li><p>咨询经验丰富的专业人士</p><p>此外，花时间咨询你的上司、导师和同事，了解是否有关键项目你应该添加到列表中。如果你的目标是在另一家公司找到一份薪水更高的工作，你可能不想告诉你的上司，但是你仍然可以向他们阐明你希望在现在的岗位上发挥的具体技能。</p><p>由于这种职业发展对你的团队、公司以及你个人都有好处，你的老板可能会很乐意帮助你联系资源或者分配相关的职责。</p></li><li><p>评估你的资历</p><p>一旦你收集了这些技能和经验，逐行排查，并根据要求对你目前的技能、教育和经验进行评估。创建一个1-5的简单评级系统，1表示您和需求之间没有匹配，5表示您完全满足要求。有了这个系统，评级越低，你需要投入更多的时间和精力来改进。</p></li><li><p>找出差距并确定模式</p><p>一旦您完成了这个练习，确定所有存在开发差距的领域。寻找共同的技能和经验，并把它们放在一起。你可能会开始注意到一些模式，其中哪些技能或经验你有扎实的背景，哪些需要进一步的发展。看看是否有需要按照特定顺序发生的项目。例如，在你承担与一个特定软件相关的额外工作任务之前，你需要学习如何使用它。这是你需要关注的技能、教育和经验的列表。</p></li></ul></li><li><p>制定你的职业发展计划</p><p>既然你已经掌握了职业生涯发展所需的技能细节，那么你就可以为此制定计划了。这一步包括列出你在未来几年想要获得的技能、教育和经验，并制定一个实现职业目标的具体计划。下面是要做的：</p><ul><li><p>设定以任务为导向的小目标</p><p>创建一组与列表中的每个项目相关的任务，这些任务将帮助您完成这些任务。例如，如果你想学习的技能之一是如何使用一个特定的软件，你的计划可以包括报名参加一个课程来学习它，与同事一起练习，并要求你的上司允许你使用这个软件作为你工作的一部分。</p></li><li><p>用时间表进行组织</p><p>根据你目标的逻辑轨迹，像时间表一样排列计划。从你可以相对快速地完成的短期目标开始，比如读一本书，然后再转向更长期的目标，比如获得硕士学位。</p></li><li><p>Think SMART</p><p>使用 SMART 目标模板可以帮助你设定可实现的目标。SMART 代表具体、可衡量、可实现、相关和有时限。例如，通过与你的主管一对一的工作来提高你对公司工资系统的理解的目标构成了 SMART 目标。按照 SMART 模板设计你的目标有助于确保你的目标是切实可行的，并且能够在预先设定的时间内实现。</p></li><li><p>创建任务截止日期</p><p>让自己对计划负责的最好方法是为每个任务分配日期。给自己一个“开始”的日期，你应该在这个日期之前完成一项任务。确保计划好每个项目的初步步骤。例如，在你参加专业发展课程之前，你可能需要申请并购买所需的教科书。在这个阶段，你有一个职业发展计划。</p></li></ul></li><li><p>衡量你的进步，准备好重新评估</p><p>你的职业发展计划并不会因为你创建了它而终止，现在实施阶段从以下几个步骤开始：</p><ul><li><p>保持跟踪</p><p>为了保持自己的责任感，跟踪你的实际执行是如何与第四步中给自己分配的日期保持一致的。每年至少检查两次这个列表，以确保你继续完成设定的时间表。</p></li><li><p>考虑里程碑</p><p>一旦你开始处理你的技能、教育和经验的列表，你就会想知道如何衡量你职业生涯的进步。一个积极的业绩评估，找到一份新工作，获得晋升，建立有用的职业关系或者获得奖励，这些都是衡量职业成功的标准。</p></li><li><p>相应地更新目标</p><p>意想不到的事情和事件将会发生。一个工作机会可能会让你的职业生涯朝着一个令人惊讶的方向发展，或者你可能会跨越整个国家。各种各样的因素可能会使你的计划偏离轨道。记住，只要你能保持灵活性，改变方向是可以的。这个计划并不具体，定期回顾一下是很有用的，可以更新你的目标以适应你的生活环境。除了定期跟踪你的进度，计划每六个月左右重新评估计划本身，并调整它以满足你当前的目标。</p></li></ul></li></ol><h3 id="如何快速地成长"><a href="#如何快速地成长" class="headerlink" title="如何快速地成长"></a>如何快速地成长</h3><h4 id="如何最快速的成长"><a href="#如何最快速的成长" class="headerlink" title="如何最快速的成长?"></a>如何最快速的成长?</h4><p>如何最快速的从初级到高级？区别明确了，问题就好办了！</p><ol><li>争取做自己不熟悉、不会做的；——不熟悉的熟悉了，不会做的会做了，自然就成长了</li><li>多做自己不熟练的、有难度的；——不熟练的熟练了，有难度的变得轻松了，自然就进步了</li><li>习以为常的操作，多考虑一下是否能够换个方式做得更快、更好、更省(自己琢磨也好，参考业内高手也行)</li><li>可以的话，思考一下如何让门外汉或初级员工更方便的做这个事情</li><li>尝试解决那些大家都解决不了的甚至被认为根本不可能解决的问题s</li></ol><h4 id="如何面试考察对方的级别"><a href="#如何面试考察对方的级别" class="headerlink" title="如何面试考察对方的级别?"></a>如何面试考察对方的级别?</h4><ol><li>你做过这个事情么？（或者：简历里你印象最深刻的事情是哪个？）</li><li>做的过程中遇到过什么问题？</li><li>你是如何解决这些遇到的问题（或者其它一些奇葩的问题）的？</li><li>类似的事情重新让你做的话，大概需要多久？</li><li>你们做过的这些工作，都有哪些地方可以继续改善提升的？</li><li>业内的通常做法是怎样的？为什么？有没有更好的方案？</li></ol><h4 id="你可以在工作中学到的6项重要工作技能"><a href="#你可以在工作中学到的6项重要工作技能" class="headerlink" title="你可以在工作中学到的6项重要工作技能"></a><a href="https://www.indeed.com/career-advice/career-development/learn-job-skills">你可以在工作中学到的6项重要工作技能</a></h4><p>最有抱负和最成功的人都有一种成长心态，不断寻找机会发展他们的工作技能。</p><p>许多人通过教育和认证课程学习各种技能，但是有几种技能是你可以在工作中获得的。</p><p>根据你的个人学习风格，在工作中掌握技能可以帮助你迅速提升你的职业生涯。</p><h5 id="在工作中学习技能意味着什么？"><a href="#在工作中学习技能意味着什么？" class="headerlink" title="在工作中学习技能意味着什么？"></a>在工作中学习技能意味着什么？</h5><p>在工作中学习技能是指通过在工作中完成任务来学习一种能力或发展知识。</p><p>大多数人在入职过程中会学到一些技能，而其他人则需要在特定工作的技术技能方面接受广泛的培训。</p><p>你可以在工作中通过实践一项任务、跟踪他人或利用职业发展机会来学习技能。</p><p>虽然你可能有一个特定的技能目标，你想学习在工作中，许多人发展他们的技能在工作中简单地通过完成他们的工作，并寻找方法，他们可以提高他们的职位。</p><h5 id="6个重要的工作技能："><a href="#6个重要的工作技能：" class="headerlink" title="6个重要的工作技能："></a>6个重要的工作技能：</h5><p>学习工作技能是适应许多不同行业的新工作环境的一个重要部分。</p><p>虽然有些技能是针对特定的职位或领域的，但许多不同的行业提供一些相同技能组合的在职培训。</p><p>以下是一些通常在工作中培养的技能：</p><ul><li>Industry or product knowledge 行业或产品知识</li><li>Professionalism 专业精神</li><li>Leadership 领导能力</li><li>Customer service 客户服务</li><li>Time management 时间管理</li><li>Strategic thinking 战略思维</li></ul><h5 id="如何在工作中学习工作技能？"><a href="#如何在工作中学习工作技能？" class="headerlink" title="如何在工作中学习工作技能？"></a>如何在工作中学习工作技能？</h5><p>在工作中学习技能可以显示你对工作的主动性和承诺，这可以增加你的职业机会。虽然大多数工作都会提供学习新技能的机会，但是决定如何开始可能是一个挑战。您需要采取的具体行动将取决于您的工作场所，但有一些技术适用于许多不同的环境。</p><p>使用这些方法开始在工作中学习新技能：</p><ol><li><p>Look for opportunities 寻找机会</p><p>获得工作技能最重要的步骤之一就是寻找成长的机会。在寻找新工作时，考虑选择一个强调在工作场所内进行培训的工作场所。</p><p>许多组织提供专业发展课程或其他免费培训的人谁是有兴趣提高他们的技能。你可以通过询问你的经理或者联系你雇主的人力资源部门来找到学习工作技能的机会。</p></li><li><p>Assess your skills 评估你的技能</p><p>在你专注于学习一项新技能之前，了解你在各种技能方面的经验水平是有帮助的。</p><p>的确，评估是衡量你在特定领域的知识和能力的一个很好的选择。</p><p>如果你有动力去追求一条需要技术技能的特定职业道路，你可以根据你所在行业的具体情况进行评估。</p><p>了解自己的优势和需要改进的地方将有助于你知道在工作中应该集中发展哪些技能。</p></li><li><p>Practice 练习</p><p>一旦你选择了一项要专注的技能，试着每天练习。</p><p>你在日常工作中练习的技能越多，你的专业技能发展得越快。</p><p>如果可能的话，开始在不会影响你工作整体质量的低风险情况下练习你的技能。</p></li><li><p>Learn from others 向别人学习</p><p>当你在工作中学习一项技能时，提高你能力的最好方法之一就是向那些在这个领域已经非常熟练的人学习。</p><p>如果你有一个特别擅长某项技能的同事，你可以要求跟随他们或者召开会议讨论他们的成功策略。</p><p>你也可以让他们观察你是如何完成一项技能或任务的，并向他们征求如何提高的建议。</p><p>当你发展你的工作技能时，试着向许多不同的同事学习，以便找到一种最适合你的技能。</p></li><li><p>Ask for feedback 寻求反馈</p><p>除了和同事一起工作，你还可以通过定期向你的经理和任何你经常合作的人寻求反馈来学习工作技能。你的队友可以就他们如何在工作中学习技能提供有价值的建议，并可能指导你获得有用的资源和培训机会。在寻求反馈时，要有礼貌，并接受别人告诉你的，以便专注于提高。</p></li><li><p>Track your progress 跟踪你的进度</p><p>当你开发你的技能时，通过定期的评估和比较你现有的知识和能力与你最初的技能水平来追踪你的进步。</p><p>这可以帮助你保持动力，并在必要时调整你的学习策略。</p></li></ol><h5 id="在工作中学习技能的步骤："><a href="#在工作中学习技能的步骤：" class="headerlink" title="在工作中学习技能的步骤："></a>在工作中学习技能的步骤：</h5><p>在工作中学习技能可以帮助你提升你的职业生涯，使你的简历对未来的雇主更具吸引力。</p><p>当你在工作中学习技能的过程中，请记住以下步骤，以便最大限度地利用你的经验：</p><ol><li><p>明确你的目标</p><p>考虑一下你为什么想要在工作中发展技能并且专注于你的目标。<br>通过一次只关注一种能力，你可以更有效地学习技能。</p></li><li><p>找一个良师益友</p><p>通过定期与人见面，讨论你的进展并提供指导，你可以更快地学习技能。<br>这也有助于确保您使用最佳行业实践正确地执行任务。</p></li><li><p>制定策略</p><p>根据可用资源创建学习每项技能的策略。<br>设定目标和期望可以帮助你衡量你的进步。</p></li><li><p>挑战自己</p><p>一旦你开始成功地在工作中运用你的新技能，通过寻找新的挑战继续提高你的技能。<br>这表明了你的雄心壮志，并且经常能让你在工作中成为一个非常有价值的人。</p></li></ol><p>Continue…Add Later</p>]]></content>
    
    
    <summary type="html">持续更新，自我成长</summary>
    
    
    
    <category term="Goal" scheme="https://www.wuzhaoyang.fun/categories/Goal/"/>
    
    
    <category term="Goal" scheme="https://www.wuzhaoyang.fun/tags/Goal/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core API最佳实践</title>
    <link href="https://www.wuzhaoyang.fun/2023/11/23/NET%20Core%20API%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://www.wuzhaoyang.fun/2023/11/23/NET%20Core%20API%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-11-23T08:31:00.000Z</published>
    <updated>2023-11-23T08:56:56.601Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1、紧密耦合"><a href="#1、紧密耦合" class="headerlink" title="1、紧密耦合"></a>1、紧密耦合</h3><p>​ 避免在控制器中声明特定的依赖项实例，应该使用依赖注入系统将依赖项注入到控制器中。后者避免了紧密耦合，更加易于维护和测试。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    ProductService productService = <span class="keyword">new</span> ProductService();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer:</span></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ProductController&gt; _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IProductService _productService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductController</span>(<span class="params">IProductService productService, ILogger&lt;ProductController&gt; logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">        _productService = productService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Mixing-Concerns功能混淆"><a href="#2、Mixing-Concerns功能混淆" class="headerlink" title="2、Mixing Concerns功能混淆"></a>2、Mixing Concerns功能混淆</h3><p>​ 控制器应专注于 HTTP 请求和生成响应。避免混合身份验证、授权或任何其他验证等问题，而是使用中间件或任何单独的类或服务。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Authentication and authorization logic here</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Data access logic here</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> Ok(StatusCodes.Status201Created);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer:</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">Authorize</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> _productService.CreateAsync(productDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ok(StatusCodes.Status201Created);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、缺乏异常处理"><a href="#3、缺乏异常处理" class="headerlink" title="3、缺乏异常处理"></a>3、缺乏异常处理</h3><p>​ 避免在控制器中使用 try-catch 块，而是使用异常中间件来更好地处理异常以返回一般错误消息。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid (Inconsistent error handling or try catch everywhere</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> _productService.CreateAsync(productDto);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Ok(StatusCodes.Status201Created);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ProductValidationException ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> BadRequest(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        _logger.LogError(ex, <span class="string">&quot;An error occurred while creating the product.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> StatusCode(StatusCodes.Status500InternalServerError);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer Exception filters or Middleware</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> _productService.CreateAsync(productDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ok(StatusCodes.Status201Created);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、长时操作"><a href="#4、长时操作" class="headerlink" title="4、长时操作"></a>4、长时操作</h3><p>​避免在控制器中执行长时间运行的操作。相反，应该把长时操作加入到后台运行的队列中，以避免系统停止服务。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GenerateReport</span>(<span class="params">Report report</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Long-running operation</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ok(report);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GenerateReport</span>(<span class="params">Report report</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> taskIdentifier = <span class="keyword">await</span> _messageQueueService.EnqueueAsync(report);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> StatusCode(StatusCodes.Status202Accepted, taskIdentifier);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、缺少验证"><a href="#5、缺少验证" class="headerlink" title="5、缺少验证"></a>5、缺少验证</h3><p>​输入验证对于确保系统的完整性和安全性至关重要。避免忽视控制器中的输入验证。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// No validation</span></span><br><span class="line">    <span class="keyword">await</span> _productService.CreateAsync(productDto);</span><br><span class="line">    <span class="keyword">return</span> Ok(StatusCodes.Status201Created);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer:</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">[FromBody] ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ModelState.IsValid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> StatusCode(StatusCodes.Status400BadRequest, ModelState);                </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> _productService.CreateAsync(productDto);</span><br><span class="line">    <span class="keyword">return</span> Ok(StatusCodes.Status201Created);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、直接访问数据库"><a href="#6、直接访问数据库" class="headerlink" title="6、直接访问数据库"></a>6、直接访问数据库</h3><p>​避免直接访问数据库，而是使用服务或存储库将控制器与特定的数据访问技术分离。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetProduct</span>(<span class="params"><span class="built_in">int</span> productId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> product = dbContext.Products.Find(productId);</span><br><span class="line">    <span class="keyword">return</span> Ok(product);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer:</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetProduct</span>(<span class="params"><span class="built_in">int</span> productId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> product = <span class="keyword">await</span> _productService.GetByIdAsync(productId);</span><br><span class="line">    <span class="keyword">return</span> Ok(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、缺乏缓存"><a href="#7、缺乏缓存" class="headerlink" title="7、缺乏缓存"></a>7、缺乏缓存</h3><p>​在适当的时候实施缓存机制。利用缓存来提高性能并减少服务器上的负载。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoi</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetProducts</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> products = <span class="keyword">await</span> _productService.GetAllAsync();</span><br><span class="line">    <span class="keyword">return</span> Ok(products);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line">[<span class="meta">ResponseCache(Duration = 60)</span>] <span class="comment">// Cache the response for 60 seconds</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetProducts</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> products = <span class="keyword">await</span> _productService.GetAllAsync();</span><br><span class="line">    <span class="keyword">return</span> Ok(products);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、缺乏身份验证和授权"><a href="#8、缺乏身份验证和授权" class="headerlink" title="8、缺乏身份验证和授权"></a>8、缺乏身份验证和授权</h3><p>​对敏感操作实施身份验证和授权。相应地保护控制器和操作方法的安全访问。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoi</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">DeleteProduct</span>(<span class="params"><span class="built_in">int</span> productId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// No authentication or authorization</span></span><br><span class="line">    <span class="keyword">await</span> _productService.DeleteAsync(productId);</span><br><span class="line">    <span class="keyword">return</span> StatusCode(StatusCodes.Status200OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">Authorize(Roles = <span class="string">&quot;Admin&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">DeleteProduct</span>(<span class="params"><span class="built_in">int</span> productId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> _productService.DeleteAsync(productId);</span><br><span class="line">    <span class="keyword">return</span> StatusCode(StatusCodes.Status200OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、逻辑过多"><a href="#9、逻辑过多" class="headerlink" title="9、逻辑过多"></a>9、逻辑过多</h3><p>​避免过多的逻辑。控制器应主要负责处理传入请求和返回响应。对于任何复杂的逻辑，应使用单独的实用程序或服务。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetProducts</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Complex business logic here</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> Ok(products);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer:</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">GetProducts</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> products = <span class="keyword">await</span> _productService.GetAllAsync();</span><br><span class="line">    <span class="keyword">return</span> Ok(products);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、忽略-HTTP-动词实现RESTful-原则"><a href="#10、忽略-HTTP-动词实现RESTful-原则" class="headerlink" title="10、忽略 HTTP 动词实现RESTful 原则"></a>10、忽略 HTTP 动词实现RESTful 原则</h3><p>​ASP.NET Core 中的控制器应遵循 RESTful 架构的原则。避免使用不符合 RESTful 约定的不当 HTTP 谓词或操作。使用适当的 HTTP 动词（GET、POST、PUT、DELETE 等）。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">DeleteProduct</span>(<span class="params"><span class="built_in">int</span> productId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer:</span></span><br><span class="line">[<span class="meta">HttpDelete(<span class="string">&quot;/api/products/&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">DeleteProduct</span>(<span class="params"><span class="built_in">int</span> productId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、缺乏正确的路由"><a href="#11、缺乏正确的路由" class="headerlink" title="11、缺乏正确的路由"></a>11、缺乏正确的路由</h3><p>​确保控制器已正确路由以处理传入请求。避免不一致或不明确的路由配置。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer:</span></span><br><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;api/products&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、缺少日志"><a href="#12、缺少日志" class="headerlink" title="12、缺少日志"></a>12、缺少日志</h3><p>​日志记录是应用程序开发的一个非常关键的方面，因为它有助于在代码执行期间跟踪重要事件、条件和错误。使用中间件或操作筛选器捕获相关信息。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avoid</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (someSimpleCondition)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> _productService.CreateAsync(productDto);</span><br><span class="line">    <span class="keyword">return</span> Ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefer</span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">CreateProduct</span>(<span class="params">ProductDto productDto</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span> (someSimpleCondition)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        _logger.LogWarning(<span class="string">&quot;Warning: Some simple condition is met.&quot;</span>); <span class="comment">// Log a warning</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">await</span> _productService.CreateAsync(productDto);</span><br><span class="line">     <span class="keyword">return</span> Ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://www.linkedin.com/pulse/12-bad-practices-avoid-aspnet-core-api-controllers-muhammad-kamran/">12 Bad Practices to Avoid in ASP.NET Core API Controllers</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1、紧密耦合&quot;&gt;&lt;a href=&quot;#1、紧密耦合&quot; class=&quot;headerlink&quot; title=&quot;1、紧密耦合&quot;&gt;&lt;/a&gt;1、紧密耦合&lt;/h3&gt;&lt;p&gt;​		 避免在控制器中声明特定的依赖项实例，应该使用依赖注入系统将依赖项注入到控制</summary>
      
    
    
    
    <category term=".NETCore" scheme="https://www.wuzhaoyang.fun/categories/NETCore/"/>
    
    
    <category term=".NETCore,API" scheme="https://www.wuzhaoyang.fun/tags/NETCore-API/"/>
    
  </entry>
  
  <entry>
    <title>Macola领域知识</title>
    <link href="https://www.wuzhaoyang.fun/2023/11/20/Macola%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.wuzhaoyang.fun/2023/11/20/Macola%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/</id>
    <published>2023-11-20T05:57:00.000Z</published>
    <updated>2023-11-21T01:07:16.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Key-Words"><a href="#Key-Words" class="headerlink" title="Key Words"></a>Key Words</h3><table><thead><tr><th>AP–Accounts Payable</th><th>应付账款</th></tr></thead><tbody><tr><td>AR–Accounts receivable</td><td>应收账款</td></tr><tr><td>BB-Bank account book</td><td>银行账簿</td></tr><tr><td>GL-General ledger management</td><td>总账管理</td></tr><tr><td>IM-Inventory management</td><td>库存管理</td></tr><tr><td>OE-Order management</td><td>订单管理</td></tr><tr><td>PO-purchase order</td><td>采购订单</td></tr><tr><td>SM-System Management</td><td>系统管理</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="Credit-Memo-And-Debit-Memo"><a href="#Credit-Memo-And-Debit-Memo" class="headerlink" title="Credit Memo And Debit Memo"></a>Credit Memo And Debit Memo</h3><p>在 Macola ERP 中，Credit Memo（贷项通知单）和 Debit Memo（借项通知单）是两种常见的会计术语，用于记录销售和采购交易中的调整。</p><p>Credit Memo（贷项通知单）通常用于以下情况：</p><ol><li>退货：当客户退回已购买的产品时，您可以发出贷项通知单来退还客户的付款。</li><li>价格调整：如果您需要调整产品的销售价格，您可以发出贷项通知单来减少客户的应付款项。</li><li>优惠折扣：如果您给客户提供了折扣或优惠，您可以发出贷项通知单来减少客户的应付款项。</li></ol><p>Debit Memo（借项通知单）通常用于以下情况：</p><ol><li>补发货物：当您漏发了产品或提供了不完整的订单时，您可以发出借项通知单来增加客户的应付款项。</li><li>价格调整：如果您需要调整产品的采购价格，您可以发出借项通知单来增加供应商的应付款项。</li><li>罚款或违约金：如果供应商或客户未履行合同条款，您可以发出借项通知单来增加对方的应付款项。</li></ol><p>总结起来，<strong>Credit Memo（贷项通知单）用于减少客户的应付款项，而 Debit Memo（借项通知单）用于增加客户或供应商的应付款项。</strong>这些通知单可以帮助您记录交易的调整和变更，确保账目的准确性。</p><h3 id="Accounts-Receivable-And-Accounts-Payable"><a href="#Accounts-Receivable-And-Accounts-Payable" class="headerlink" title="Accounts Receivable And Accounts Payable"></a>Accounts Receivable And Accounts Payable</h3><p>在 Macola ERP 中，AR 和 AP 是会计术语，分别代表应收账款（Accounts Receivable）和应付账款（Accounts Payable）。</p><p>AR（应收账款）是指企业向客户销售商品或提供服务后尚未收到的付款金额。当您向客户发出销售发票时，相应的金额会记录在应收账款中。AR 反映了客户欠您的款项，是您从客户那里应收的资金。</p><p>AP（应付账款）是指企业购买商品或接受服务后尚未支付的金额。当您从供应商收到采购发票时，相应的金额会记录在应付账款中。AP 反映了您欠供应商的款项，是您应付给供应商的资金。</p><p>AR 和 AP 是财务管理中重要的指标，可以帮助企业跟踪和管理与客户和供应商之间的财务关系。通过监控 AR 和 AP 的变化，您可以了解企业的应收款项和应付款项的状况，并及时采取措施来确保资金流动的正常运作。</p><h3 id="Accounts-Payable"><a href="#Accounts-Payable" class="headerlink" title="Accounts Payable"></a>Accounts Payable</h3><h3 id="BB-Bank-account-book"><a href="#BB-Bank-account-book" class="headerlink" title="BB-Bank account book"></a>BB-Bank account book</h3><p> “Bank Account Book”，即银行账户簿。银行账户簿是记录企业或个人在银行中的账户活动的记录。它包含了存款、取款、利息、手续费等与银行账户相关的交易信息。</p><p>在 Macola ERP 中，您可以使用银行账户簿来跟踪和管理与银行账户相关的财务活动。这包括记录存款、提现、支票、银行费用等。通过维护准确的银行账户簿，您可以确保与银行账户的余额和交易记录一致，并进行有效的现金管理和对账操作。</p><h3 id="GL-Account、Cost-Unit、Cost-Center"><a href="#GL-Account、Cost-Unit、Cost-Center" class="headerlink" title="GL Account、Cost Unit、Cost Center"></a>GL Account、Cost Unit、Cost Center</h3><p>在 Macola ERP 中，”GL Account” 是指 “General Ledger Account”，即总账科目。总账科目是用于记录和跟踪企业财务交易的分类账户。它们用于汇总和组织财务信息，以便进行报表编制、财务分析和决策制定。</p><p>总账科目可以代表不同类型的资产、负债、所有权权益、收入和费用。每个总账科目都有一个唯一的编码和名称，用于识别和区分不同的科目。例如，现金、应收账款、应付账款、销售收入、采购成本等都可以是总账科目。</p><p>另外，”Cost Unit” 和 “Cost Center” 是与成本管理相关的概念。”Cost Unit” 是指成本单位，它可以是产品、项目、部门或其他任何可以衡量成本的实体。”Cost Center” 是指成本中心，它是一个特定部门、团队或业务单位，负责管理和控制相关成本。</p><p>在 Macola ERP 中，您可以使用总账科目、成本单位和成本中心来跟踪和管理企业的财务和成本信息。这些概念相互关联，帮助您进行准确的财务报告、成本分析和预算控制。</p><h3 id="Closing-of-account-period"><a href="#Closing-of-account-period" class="headerlink" title="Closing of account period"></a>Closing of account period</h3><p>在 Macola ERP 中，”账期关闭”是指在特定时间段结束后，对财务和会计模块中的账期进行结算和关闭的过程。账期关闭的目的是确保财务数据的准确性和完整性，以便进行财务报表的生成和分析。</p><p>账期关闭通常涉及以下步骤：</p><ol><li><p>结账准备：在进行账期关闭之前，需要进行一些准备工作。这包括确认所有财务交易都已正确记录和处理，检查余额和科目的准确性，处理未对账的项目，确保凭证和账户的一致性等。</p></li><li><p>结账操作：一旦准备工作完成，可以进行账期关闭操作。这通常由财务或会计人员在 Macola ERP 中执行。在进行账期关闭时，系统会自动进行一系列的处理，如计算余额、更新账期信息、生成结账报表等。</p></li><li><p>结账报表：账期关闭后，系统会生成一些结账报表，用于展示账期内的财务数据和统计信息。这些报表可以包括利润表、资产负债表、现金流量表等财务报表，以及其他统计报表和分析工具。</p></li><li><p>锁定账期：一旦账期关闭和报表生成完成，通常会对该账期进行锁定，防止后续的修改或录入操作对已结账期的数据产生影响。这可以确保账期的数据不会被意外更改，保持数据的完整性和可追溯性。</p></li></ol><p>通过账期关闭的操作，企业可以确保财务数据的准确性和一致性，为管理层和利益相关者提供可靠的财务信息，并支持决策和报告的准备工作。这是财务和会计管理中的重要步骤，有助于维护财务数据的可靠性和可信度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Key-Words&quot;&gt;&lt;a href=&quot;#Key-Words&quot; class=&quot;headerlink&quot; title=&quot;Key Words&quot;&gt;&lt;/a&gt;Key Words&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AP–Accounts Payable&lt;</summary>
      
    
    
    
    <category term="Macola ERP" scheme="https://www.wuzhaoyang.fun/categories/Macola-ERP/"/>
    
    
    <category term="Macola ERP" scheme="https://www.wuzhaoyang.fun/tags/Macola-ERP/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s UOW?</title>
    <link href="https://www.wuzhaoyang.fun/2023/09/08/What&#39;s%20UOW/"/>
    <id>https://www.wuzhaoyang.fun/2023/09/08/What&#39;s%20UOW/</id>
    <published>2023-09-08T08:13:00.000Z</published>
    <updated>2023-09-08T08:40:08.382Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="What’s-UOW"><a href="#What’s-UOW" class="headerlink" title="What’s UOW?"></a>What’s UOW?</h2><p>“A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you’re done, it figures out everything that needs to be done to alter the database as a result of your work.”   – Martin Fowler</p><p>SO Unit of Work Key Info:</p><ul><li>UOW keeps track of changes</li><li>UOW maintenance change list</li><li>UOW commits all changes at once</li></ul><p>EF Core DbContext naturally UOW is realized</p><ul><li><p>Each DbContext instance has a ChangeTracker that tracks changes to the entity</p></li><li><p>When DbContext.SaveChanges is called, all changes are committed to the database in one go via the transaction</p></li></ul><p><strong>Implementing Repository pattern in domain-driven Design，By UOW UnitOfWorkInterceptor took over after ApplicationServervice methods performed DbContext. SaveChanges operation</strong></p><p><strong>The transaction is just a way to realize the unit of work. EFCore can implement UOW without using transactions.</strong></p><h2 id="What’s-Ambient-Transactions"><a href="#What’s-Ambient-Transactions" class="headerlink" title="What’s Ambient Transactions?"></a>What’s Ambient Transactions?</h2><p><strong>Common Transaction：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> ApplicationDbContext())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> transaction = context.Database.BeginTransaction())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> student1 = <span class="keyword">new</span> Student();</span><br><span class="line">        student1.Name = <span class="string">&quot;Robert Fatou&quot;</span>;</span><br><span class="line">        context.Add(student1);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">        <span class="comment">// The Id will have a valid value</span></span><br><span class="line">        Console.WriteLine(student1.Id);</span><br><span class="line">        <span class="comment">// Let&#x27;s revert the operation</span></span><br><span class="line">        transaction.Rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Ambient Transaction：</strong></p><p>An <strong>ambient transaction</strong> is one that works at the thread level. Thus, all operations that occur in that context will be part of the transaction.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> scope = <span class="keyword">new</span> TransactionScope())</span><br><span class="line">    &#123;</span><br><span class="line">        CreateStudent();</span><br><span class="line">        CreateCourse();</span><br><span class="line">        <span class="comment">// Uncomment the following line if you want to</span></span><br><span class="line">        <span class="comment">// have the previous operations persisted in the Database</span></span><br><span class="line">        <span class="comment">//scope.Complete();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateCourse</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> ApplicationDbContext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.Name = <span class="string">&quot;Programming I&quot;</span>;</span><br><span class="line">        context.Add(course);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateStudent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> ApplicationDbContext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> student1 = <span class="keyword">new</span> Student();</span><br><span class="line">        student1.Name = <span class="string">&quot;Transaction Scope&quot;</span>;</span><br><span class="line">        context.Add(student1);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reference：</strong></p><p><a href="https://www.martinfowler.com/eaaCatalog/unitOfWork.html">P of EAA: Unit of Work (martinfowler.com)</a></p><p><a href="https://learn.microsoft.com/en-us/ef/core/dbcontext-configuration/">DbContext Lifetime, Configuration, and Initialization - EF Core | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/en-us/ef/core/saving/transactions#cross-context-transaction">Transactions - EF Core | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/en-us/dotnet/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope">Implementing an Implicit Transaction using Transaction Scope - .NET Framework | Microsoft Learn</a></p><p><a href="https://gavilan.blog/2018/08/02/entity-framework-core-2-1-ambient-transactions-new-functionality">Entity Framework Core 2.1: Ambient Transactions</a></p>]]></content>
    
    
    <summary type="html">Some Usual Development Pattern:UOW</summary>
    
    
    
    <category term="Pattern" scheme="https://www.wuzhaoyang.fun/categories/Pattern/"/>
    
    
    <category term="Pattern" scheme="https://www.wuzhaoyang.fun/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Find Your Life Goals</title>
    <link href="https://www.wuzhaoyang.fun/2023/06/28/Find%20Your%20Life%20Goals/"/>
    <id>https://www.wuzhaoyang.fun/2023/06/28/Find%20Your%20Life%20Goals/</id>
    <published>2023-06-28T06:54:00.000Z</published>
    <updated>2023-11-28T07:05:55.431Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="《成为你自己》"><a href="#《成为你自己》" class="headerlink" title="《成为你自己》"></a>《成为你自己》</h1><p><img src="https://i.postimg.cc/rs2HtrrG/20220607211453924.png" alt="目标层次结构"></p><p>拓展必看：</p><ul><li><a href="https://github.com/amerina/Beyourself/blob/main/BecomeYourSelf.md">成为你自己详解版</a></li><li><a href="https://github.com/amerina/Beyourself/blob/main/%E4%BA%BA%E7%94%9F%E7%90%86%E6%83%B3%E4%B8%8E%E7%9B%AE%E6%A0%87.xmind">人生理想与目标思维导图</a></li></ul><h2 id="1、为什么人生目标很重要"><a href="#1、为什么人生目标很重要" class="headerlink" title="1、为什么人生目标很重要?"></a>1、为什么人生目标很重要?</h2><p>书写格式正确的书面目标为什么如此重要</p><ul><li><p>决策疲劳</p><p><mark>我们是人。我们被编程为采取简单的选择。走阻力最小的路。只有我们清晰地知道自己想要什么，才有动力选择更难走的路。</mark><br><mark>如果你的目标明确，决策疲劳就会减少，你的选择也会变得更容易。</mark>更容易而不是容易:(</p></li><li><p>衡量(进度)&#x2F;动机</p><p>衡量你的进步和你花在目标上的时间，是不断提醒你对自己做出的承诺</p></li></ul><h2 id="2、人生目标的类型"><a href="#2、人生目标的类型" class="headerlink" title="2、人生目标的类型"></a>2、人生目标的类型</h2><p>请记住，是你选择了什么，而不是你没有选择的东西，让你在生活中快乐。</p><h3 id="目标类型分类"><a href="#目标类型分类" class="headerlink" title="目标类型分类"></a>目标类型分类</h3><ul><li>成果目标：做出实实在在的成果</li><li>过程目标：每天专注完成的任务习惯</li><li>性能目标：个人标准</li><li>主题目标：专注于某个领域的目标</li><li>时间目标：有DeadLine的目标</li></ul><h3 id="人生目标分类"><a href="#人生目标分类" class="headerlink" title="人生目标分类"></a>人生目标分类</h3><ul><li>健康目标：每周固定的练习时间</li><li>财务目标：获得一个稳定&#x2F;舒适的财务状况</li><li>关系目标：维系家庭和朋友关系可能是最简单的方法，以戏剧性地改善你的生活和你的整体幸福感。</li><li>教育目标：终身学习者的心态</li><li>个人发展目标：成为更优秀的你</li><li>职业目标：确定一个明确的职业目标</li><li>心理目标：适当地放空自己，有规律地休息或活动给自己减压</li><li>生活方式目标：休闲目标、爱好&#x2F;朋友很重要</li><li>退休目标：仔细想想你的退休目标是什么</li></ul><h2 id="3、如何设定目标"><a href="#3、如何设定目标" class="headerlink" title="3、如何设定目标"></a>3、如何设定目标</h2><p>不管你使用什么技巧，记住，如果目标没有写下来，你就没有目标。同时，记住要为你的目标设定激励。<strong>如果你的目标不能激发行动，那么它们对你就没有用处。</strong></p><h3 id="目标设定方法-技术-框架"><a href="#目标设定方法-技术-框架" class="headerlink" title="目标设定方法&#x2F;技术&#x2F;框架"></a>目标设定方法&#x2F;技术&#x2F;框架</h3><ul><li><p><strong>每个类别一个目标技巧</strong></p><p>浏览第二章的分类列表，绞尽脑汁，直到你能为每个分类想出一个目标。</p></li><li><p><strong>价值观优先技巧</strong></p><p>一旦你有了这个列表，你就有了一个透镜来审视你的生活。你可以问问自己，那些看重 x 的人会做什么？他们如何与人交流？</p></li><li><p><strong>目的第一技巧</strong></p><p>如果你已经知道你的人生目标是什么，那么通过目标的透镜来审视你生活的方方面面，设定有效的目标是极其容易的。</p></li><li><p><strong>Why，What，How技巧</strong></p><p>如果你还没有看过，你真的应该看看西蒙 · 西尼克的 TED 演讲，名为<strong>“从为什么开始”</strong>。</p><p><em>Notes：想象一下雇主为什么非要雇佣你不可，你有什么不可替代的吸引力</em></p></li><li><p><strong>SMART Goals 明智的目标</strong></p><ul><li>Specific 具体点</li><li>Measurable 可测量的</li><li>Attainable 可以实现</li><li>Relevant 相关的</li><li>Time-bound 有时限的</li></ul><p><strong>SMART 目标描述了一个完善的目标的剖析。</strong></p></li><li><p><strong>讣告技巧</strong></p><p>讣告方法给了你一个很好的方式去思考你想要什么样的目标，而不仅仅是如何写目标(比如 SMART 目标)。</p></li></ul><h2 id="4、生活目标的例子"><a href="#4、生活目标的例子" class="headerlink" title="4、生活目标的例子"></a>4、生活目标的例子</h2><ul><li><p>财务目标例子</p><p><strong>在未来5年内每年赚取 $x $000美元</strong></p></li><li><p>教育目标实例</p><ul><li><strong>我将每年至少做 x 个网络课程变成我的爱好。只有有趣的事情</strong></li><li><strong>在接下来的两年里，我将学习如何把 x 说成一个测试级别的 x</strong></li></ul></li><li><p>个人发展目标的例子</p><ul><li>我将致力于我的时间管理和承诺。我会更频繁地对新事物说不，以保证我能够兑现我已经许下的诺言</li><li>我会更认真地对待个人责任。我不会因为我对结果有部分影响的事件而责怪他人</li></ul></li><li><p>关系目标例子</p><p>我会每周至少联系我所有亲近的家人一次，看看他们过得怎么样</p></li><li><p>职业目标的例子</p><ul><li><strong>我将有勇气改变我的职业生涯。永远不会太迟。我现在将采取渐进的步骤，目标是在未来24个月内进入这个行业</strong></li><li>我将在未来3年内开始我自己的事业，在一个行业，我喜欢和发现迷人</li></ul></li><li><p>心理目标的例子</p><p><strong>我会每天冥想10分钟，写日记，这样我总是能够自我意识到是什么导致了我内心的挣扎和痛苦</strong></p></li><li><p>生活方式目标的例子</p><ul><li>成为比我年轻的人的榜样，在那里指导他们，帮助他们成长</li><li><strong>我将在未来5年内自行出版一本书。如果我能让100个人读我的作品，我会很高兴，也会很满足</strong></li></ul></li></ul><h2 id="5、人生目标语录"><a href="#5、人生目标语录" class="headerlink" title="5、人生目标语录"></a>5、人生目标语录</h2><ul><li><strong>一个正确设定的目标已经实现了一半</strong></li><li><strong>设定目标是将无形变为有形的第一步</strong></li><li><strong>在没有明确目标的情况下，我们会变得奇怪地忠于每天做一些琐碎的事情</strong></li><li><strong>一个目标并不总是意味着要达到，它通常只是告诉我们目的地</strong></li><li><strong>当目标明显无法实现时，不要调整目标，调整行动步骤</strong></li><li><strong>目标是一个有最后期限的梦想</strong></li><li><strong>目标是强大的动力，但它们也会让你痛苦。你需要一流的日常习惯</strong></li></ul><p>最后一句话很好地开启了下一章。在这篇文章中，我们将讨论长期坚持目标的策略，以及如何让自己对自己负责。</p><h2 id="6、如何坚持你的目标"><a href="#6、如何坚持你的目标" class="headerlink" title="6、如何坚持你的目标"></a>6、如何坚持你的目标</h2><ul><li><p>每周&#x2F;每月&#x2F;每季度和每年的回顾</p><p>星期天是我的复习日。我重新阅读了我所有的目标，以及当我决定这些目标对我很重要的时候，我所写的关于它们的内容。</p><p>如果没有这种有规律的强化，你的目标就会半途而废。你需要评估你的进展，并决定在接下来的一周里需要做些什么。</p><p>我知道这一切听起来像“工作”。没错。它应该是。自尊和实现你的目标是工作。</p><p><strong>你不会后悔每周花15分钟来反思你人生中最重要的愿望。</strong></p></li><li><p>我应该有多少个目标？</p><p>应该在3到5之间。你需要能够记住它们，并把它们放在首位。</p></li><li><p><strong>里程碑的力量</strong></p><p>里程碑可以被认为是子目标，但它们可以更容易地使用 SMART 目标格式编写。</p></li><li><p><strong>奖励自己的进步</strong></p><p>如果你真的达到了一个里程碑，庆祝吧！这是一个了不起的成就，你立即进入前5% 的人。</p></li><li><p>实现人生目标</p></li></ul><h2 id="7、使用讣告技巧确定人生目标"><a href="#7、使用讣告技巧确定人生目标" class="headerlink" title="7、使用讣告技巧确定人生目标"></a>7、使用讣告技巧确定人生目标</h2><ol><li><p>描述你想成为什么样的人。用你的讣告作为框架来表达你自己。</p><p>发现你的人生目的和目标，你要做的第一件事就是写你的讣告。</p></li><li><p>为生活的不同方面创建四个人生目标</p></li><li><p>对于每个目标，你都要思考你想要它的原因</p><p>如果你实现了这个目标，它将如何影响你的生活？</p></li><li><p>思考如果目标失败了的话你的生活是怎样的？</p><p>你对自己的情绪和失败的感觉越清楚，你成功的动力就越强大。</p></li><li><p>从今天开始的十二个月内，你将设定一个S.M.A.R.T. 里程碑，它将成为你实现目标的垫脚石。</p><p>你需要设定一个时间点，在这个时间点上你可以检查你的进度，从而鼓励你今天就采取行动。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;《成为你自己》&quot;&gt;&lt;a href=&quot;#《成为你自己》&quot; class=&quot;headerlink&quot; title=&quot;《成为你自己》&quot;&gt;&lt;/a&gt;《成为你自己》&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.postimg.cc/rs2Htr</summary>
      
    
    
    
    <category term="Goal" scheme="https://www.wuzhaoyang.fun/categories/Goal/"/>
    
    
    <category term="Goal" scheme="https://www.wuzhaoyang.fun/tags/Goal/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计术语表</title>
    <link href="https://www.wuzhaoyang.fun/2023/06/27/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%9C%AF%E8%AF%AD%E8%A1%A8/"/>
    <id>https://www.wuzhaoyang.fun/2023/06/27/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%9C%AF%E8%AF%AD%E8%A1%A8/</id>
    <published>2023-06-27T08:05:48.000Z</published>
    <updated>2023-07-24T07:57:46.272Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>领域驱动设计（Domain-Driven Design，简称DDD）是一种软件开发方法论，它强调通过深入理解领域知识和业务需求，将领域模型贯穿于整个软件开发过程中。</p><p>以下是一些领域驱动设计中常见的专业术语及其解释：</p><p>战略和战术设计是站在DDD的角度进行划分。</p><ul><li><p>战略设计侧重于高层次、宏观上去划分和集成限界上下文，而战术设计则关注更具体使用建模工具来细化上下文。</p></li><li><p>战略设计的目标是建立一个一致、有界和可演化的领域模型，帮助团队理解业务需求，并为战术设计提供指导。</p></li><li><p>战术设计的目标是在特定的限界上下文中构建合理、可维护的领域模型，通过建立领域对象之间的关系和定义明确的职责，实现业务逻辑的有效组织和封装。</p></li><li><p>战略设计：战略设计关注的是整个领域的全局性问题，以及如何将业务需求、领域知识和软件设计相结合。</p><ul><li><p>通用语言：在领域驱动设计中，通用语言是指开发团队和领域专家之间共享的、统一的业务语言。</p><p>通用语言在整个领域驱动设计过程中起着至关重要的作用。通过与领域专家密切合作，开发团队能够理解业务领域的专业术语、业务规则和概念。然后，开发团队将这些领域专有的语言转化为代码中的类、方法和属性等编程语言的元素。</p><p>通用语言的使用有助于消除开发人员和领域专家之间的沟通障碍，确保开发人员对领域需求的准确理解。它还促进了领域模型的一致性，使得领域模型能够贯穿于整个软件开发过程中，从需求分析到代码实现。</p><p>通用语言应该在限界上下文中得到充分运用，以确保在不同团队和组织之间的沟通和协作时能够保持一致。通过在代码中使用与通用语言相匹配的命名和概念，可以提高代码的可读性和可维护性，并增强团队之间的合作效率。</p></li><li><p>限界上下文（Bounded Context）：定义了业务领域的边界，并明确了在该上下文中使用的术语和概念。限界上下文帮助将大型领域划分为更小的、可管理的部分。</p></li><li><p>大胆的领域模型（Big Picture Model）：通过深入理解业务领域，建立起高层次、综合性的领域模型。这个模型用于指导整个软件系统的设计和演化。</p></li><li><p>上下文映射（Context Mapping）：指不同限界上下文之间的关系和交互方式。通过上下文映射，可以定义不同上下文之间的协作机制、数据交换方式等。</p></li><li><p>领域（Domain）：指特定业务领域或问题领域，是软件系统所涉及的核心概念和规则的集合。</p><ul><li><p>核心域（Core Domain）：核心域是指与业务的核心竞争力直接相关的部分。它包含了组织的关键业务流程、核心概念和业务规则。核心域通常是系统的重点关注区域，其中的领域模型和业务逻辑是复杂且变化频繁的。</p><p>对核心域的设计和开发需要投入更多的精力和资源，以确保系统在这个领域具有竞争优势。通常会采用更深入的领域建模和领域驱动设计技术，以满足核心业务需求。</p></li><li><p>支撑域（Supporting Domain）：支撑域是指与核心域紧密相关，但不直接构成核心业务的领域部分。它为核心域提供支持和辅助功能，帮助核心业务的实现和运行。</p><p>支撑域的特点是对业务的理解和变动要求较低，通常包括通用的基础设施、共享服务、安全性和认证等功能。支撑域的设计和开发可以借鉴成熟的技术和框架，以提高效率和稳定性。</p><p>通用域（Generic Domain）：通用域是指与特定业务领域无关的通用功能和共享资源。它包括通用的业务功能、通用工具和通用库等。通用域通常是广泛应用于多个领域的通用概念和模式。</p><p>通用域的设计和开发具有一定的通用性和重复性，可以通过复用现有的解决方案和组件来加快开发进度。通用域的设计应该具备可扩展性和灵活性，以满足不同领域的需求。</p></li><li><p>划分领域为核心域、支撑域和通用域有助于团队在系统架构和设计时有针对性地分配资源和关注点。核心域是系统的关键，需要更多的精力进行设计和演化；支撑域提供支持，减轻核心域的压力；而通用域提供了通用功能，可以在不同领域中复用。</p></li></ul></li><li></li></ul></li><li><p>战术建模：战术设计关注的是在限界上下文内部对领域模型进行具体的建模和设计。</p><ul><li>领域层(Domain Layer)：在分层架构中负责领域逻辑的那部分设计和实现。领域层是在软件中用来表示领域模型的地方。</li><li>领域模型（Domain Model）：是对领域的概念、行为和规则的抽象表示。它反映了领域的本质，并与业务专家的语言相对应。</li><li>实体（Entity）：是具有唯一标识的领域对象，具有生命周期和状态变化。实体通常与业务中的具体事物相对应，如订单、用户等。</li><li>值对象（Value Object）：是没有唯一标识的领域对象，其价值是由其属性的组合决定的。值对象通常用于描述不可变的概念，如日期、时间、货币等。</li><li>聚合（Aggregate）：是一组相关对象的集合，其中一个对象是聚合根（Aggregate Root）。聚合根负责维护整个聚合的一致性和边界。</li><li>聚合根（Aggregate Root）：是聚合中的一个对象，其他对象通过聚合根进行访问和操作。聚合根具有全局唯一的标识，并负责保证聚合的完整性。</li><li>领域事件（Domain Event）：表示领域中发生的重要事情或状态改变的事件。领域事件可以用于解耦领域模型之间的交互，同时支持事件驱动架构。</li><li>领域服务（Domain Service）：是一种无状态的操作，提供对领域中的特定行为或业务规则的操作。领域服务通常不持有状态，但可以操作领域对象。</li><li>模块Model：一个抽象的系统，描述了领域的所选方面，可用于解决与该领域有关的问题。在领域驱动设计中，模块（Module）通常是基于业务功能或子领域来定义的。它可以包含一组聚合、实体、值对象、领域服务以及处理领域事件等。模块的目的是将相关的领域概念和行为封装在一起，提供高内聚、低耦合的设计。模块有助于组织和管理复杂的领域模型，使其更易于理解和维护。每个模块可以有自己的限界上下文、领域专家和开发团队，使其能够独立地开发、测试和演化。</li></ul></li></ul><p>领域驱动设计的四个层次（Layered Architecture）：包括用户界面层（User Interface Layer）、应用层（Application Layer）、领域层（Domain Layer）和基础设施层（Infrastructure Layer）。每个层次有不同的职责和关注点，</p><ul><li><p>分析模式（Analysis Patterns）：分析模式（Analysis Patterns）是在领域驱动设计中使用的一种方法，用于识别和描述在特定领域中常见的模式和概念。这些模式和概念反映了领域内的通用问题和解决方案，并帮助开发团队更好地理解领域需求。</p><p>分析模式主要用于分析和理解领域，而不是直接用于具体的实现。它们通过描述领域中的重要概念、关系和行为，帮助开发团队和领域专家之间建立共享的语言和理解。</p><p>以下是一些常见的分析模式：</p><ol><li>实体（Entity）：表示在领域中具有唯一标识的对象。实体具有自己的属性和行为，并与其他实体之间存在关系。</li><li>值对象（Value Object）：表示在领域中具有特定属性但无需唯一标识的对象。值对象通常用于描述领域中的特定值或概念。</li><li>聚合（Aggregate）：表示一组相关对象的集合，由一个聚合根（Aggregate Root）负责维护整个聚合的一致性和边界。</li><li>仓储（Repository）：表示对领域对象进行持久化和检索的机制。仓储提供了一种访问领域对象的接口，隐藏了底层的数据访问细节。</li><li>服务（Service）：表示领域中的操作和行为，这些操作不属于特定的实体或值对象，而是跨越多个对象的逻辑操作。</li><li>事件（Event）：表示领域中发生的重要事情或状态改变。事件可以被用于触发其他领域对象的行为或通知其他上下文。</li><li>规则（Rules）：表示领域中的业务规则和约束。规则定义了领域对象的行为和限制条件。</li></ol><p>分析模式帮助开发团队通过共享的领域语言和模式，更好地理解和解决特定领域中的问题。它们可以作为设计的参考和指导，帮助构建更符合业务需求的领域模型和软件系统。</p></li><li><p>深层模型(Deep Model)：深层模型通常是指对领域进行更加细致和全面的建模，包括考虑业务的各种细节、规则和约束，以及满足领域的复杂需求。它通常与大规模、复杂的领域相关，需要深入理解和处理领域中的各种关系和交互。</p></li></ul><p>  深层模型的设计和实现需要结合领域专家的经验和领域知识，以及领域驱动设计中的建模技巧和方法。通过建立深层模型，可以更好地满足业务需求，提高系统的可靠性和灵活性。</p><p>资源拓展：</p><ol><li><a href="https://domainstorytelling.org/">Domain Storytelling - Domain Storytelling</a></li><li><a href="https://github.com/amerina/awesome-ddd">Awesome-DDD</a></li></ol>]]></content>
    
    
    <summary type="html">Some common terminology for domain-driven design</summary>
    
    
    
    <category term="DDD" scheme="https://www.wuzhaoyang.fun/categories/DDD/"/>
    
    
    <category term="DDD" scheme="https://www.wuzhaoyang.fun/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>从0到1发布Nuget</title>
    <link href="https://www.wuzhaoyang.fun/2023/06/26/%E4%BB%8E0%E5%88%B01%E5%8F%91%E5%B8%83Nuget/"/>
    <id>https://www.wuzhaoyang.fun/2023/06/26/%E4%BB%8E0%E5%88%B01%E5%8F%91%E5%B8%83Nuget/</id>
    <published>2023-06-26T05:32:03.000Z</published>
    <updated>2023-06-26T08:46:33.664Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Nuget"><a href="#Nuget" class="headerlink" title="Nuget"></a>Nuget</h2><h3 id="1、创建示例项目"><a href="#1、创建示例项目" class="headerlink" title="1、创建示例项目"></a>1、创建示例项目</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--</span>创建文件夹EasyUtilityCore</span><br><span class="line"><span class="built_in">md</span> EasyUtilityCore</span><br><span class="line"><span class="built_in">cd</span> EasyUtilityCore</span><br><span class="line"></span><br><span class="line"><span class="literal">--</span>新建EasyUtilityCore类库</span><br><span class="line">dotnet new classlib</span><br></pre></td></tr></table></figure><p>新建扩展StringExtension</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EasyUtilityCore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StringExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 忽略空格与大小写</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strA&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strB&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CompareIgnoreCaseAndSpace</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> strA, <span class="built_in">string</span> strB</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strA == <span class="literal">null</span> || strB == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> strA == strB;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> strA.Trim().ToLower() == strB.Trim().ToLower();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 超长字符串截取</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 处理较短字符串截取Case</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;length&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Sub</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> str, <span class="built_in">int</span> length, <span class="built_in">int</span> index = <span class="number">0</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> str.Substring(index, Math.Min(str.Length, length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--构建类库</span><br><span class="line">dotnet build</span><br></pre></td></tr></table></figure><h3 id="2、添加包元数据"><a href="#2、添加包元数据" class="headerlink" title="2、添加包元数据"></a>2、添加包元数据</h3><p>每个 NuGet 包都需要一个清单，用以描述包的内容和依赖项。 在最终包中，清单是基于项目文件中包含的 NuGet 元数据属性生成的 文件。</p><p>打开 <em>.csproj</em>项目文件，并在现有 <code>&lt;PropertyGroup&gt;</code> 标记中添加以下属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageId</span>&gt;</span>EasyUtilityCore<span class="tag">&lt;/<span class="name">PackageId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Authors</span>&gt;</span>wzyandi<span class="tag">&lt;/<span class="name">Authors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Company</span>&gt;</span>wzyandi<span class="tag">&lt;/<span class="name">Company</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Description</span>&gt;</span>Some common extension methods<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryUrl</span>&gt;</span>https://github.com/amerina/EasyUtilityCore<span class="tag">&lt;/<span class="name">RepositoryUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageProjectUrl</span>&gt;</span>https://github.com/amerina/EasyUtilityCore<span class="tag">&lt;/<span class="name">PackageProjectUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RepositoryType</span>&gt;</span>Git<span class="tag">&lt;/<span class="name">RepositoryType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageTags</span>&gt;</span>ASP.NET Core,Utility Method<span class="tag">&lt;/<span class="name">PackageTags</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Copyright</span>&gt;</span>Amerina<span class="tag">&lt;/<span class="name">Copyright</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PackageId在 nuget.org必须是唯一的。</p><h3 id="3、构建包"><a href="#3、构建包" class="headerlink" title="3、构建包"></a>3、构建包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet pack</span><br></pre></td></tr></table></figure><p>查看EasyUtilityCore\bin\Debug路径已生成EasyUtilityCore.1.0.0.nupkg文件</p><h3 id="4、发布包"><a href="#4、发布包" class="headerlink" title="4、发布包"></a>4、发布包</h3><p>将 <em>.nupkg</em> 文件发布到 nuget.org，方法是将 dotnet nuget push命令与从 nuget.org 获取的 API 密钥配合使用。</p><p>获取 API 密钥</p><ol><li><a href="https://www.nuget.org/users/account/LogOn?returnUrl=/">登录你的 nuget.org 帐户</a>，或创建一个帐户（如果你还没有帐户）。</li><li>选择用户名（在右上角），然后选择“API 密钥”。</li><li>选择 <strong>“创建”</strong>，并提供密钥的名称。</li><li>在 <strong>“选择范围”</strong>下，选择“ <strong>推送</strong>”。</li><li>在 <strong>“选择包</strong>&gt;<strong>Glob 模式</strong>”下，输入 *。</li><li>选择“创建”。</li><li>选择 <strong>“复制</strong> ”以复制新密钥。</li></ol><p>在包含 <em>.nupkg</em> 文件的文件夹运行以下命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget push EasyUtilityCore.<span class="number">1.0</span>.<span class="number">0</span>.nupkg <span class="literal">-key</span> [<span class="type">yourKey</span>] <span class="literal">-s</span> https://api.nuget.org/v3/index.json</span><br></pre></td></tr></table></figure><h3 id="5、包版本控制"><a href="#5、包版本控制" class="headerlink" title="5、包版本控制"></a>5、包版本控制</h3><p>特定版本号的格式为 Major.Minor.Patch[-Suffix] ，其中的组件具有以下含义：</p><ul><li><em>Major</em>：重大更改</li><li><em>Minor</em>：新增功能，但可向后兼容</li><li><em>Patch</em>：仅可向后兼容的 bug 修复</li><li><em>-Suffix</em>（可选）：连字符后跟字符串，表示预发布版本</li></ul><p>-Suffix-包开发人员通常遵循识别的命名约定：</p><ul><li><code>-alpha</code>：Alpha 版本，通常用于在制品和试验品。</li><li><code>-beta</code>：Beta 版本，通常指可用于下一计划版本的功能完整的版本，但可能包含已知 bug。</li><li><code>-rc</code>：候选发布，通常可能为最终（稳定）版本，除非出现重大 bug。</li></ul><h3 id="6、参考"><a href="#6、参考" class="headerlink" title="6、参考"></a>6、参考</h3><p><a href="https://learn.microsoft.com/zh-cn/nuget/what-is-nuget">NuGet 及其功能介绍 | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/zh-cn/nuget/nuget-org/package-readme-on-nuget-org">NuGet.org 上的包自述文件 | Microsoft Learn</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Nuget&quot;&gt;&lt;a href=&quot;#Nuget&quot; class=&quot;headerlink&quot; title=&quot;Nuget&quot;&gt;&lt;/a&gt;Nuget&lt;/h2&gt;&lt;h3 id=&quot;1、创建示例项目&quot;&gt;&lt;a href=&quot;#1、创建示例项目&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Nuget" scheme="https://www.wuzhaoyang.fun/categories/Nuget/"/>
    
    
    <category term="Nuget" scheme="https://www.wuzhaoyang.fun/tags/Nuget/"/>
    
  </entry>
  
</feed>
